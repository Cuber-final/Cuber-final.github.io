<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>准备面试工作</title>
    <link href="/devstack/"/>
    <url>/devstack/</url>
    
    <content type="html"><![CDATA[<h2 id="项目技术栈记载"><a href="#项目技术栈记载" class="headerlink" title="项目技术栈记载"></a>项目技术栈记载</h2><h2 id="web应用开发"><a href="#web应用开发" class="headerlink" title="web应用开发"></a>web应用开发</h2><h3 id="基于SSM框架的网上商城开发"><a href="#基于SSM框架的网上商城开发" class="headerlink" title="基于SSM框架的网上商城开发"></a>基于SSM框架的网上商城开发</h3><h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h4><h5 id="SSM框架"><a href="#SSM框架" class="headerlink" title="SSM框架"></a>SSM框架</h5><blockquote><p>SSM框架是spring MVC ，spring和mybatis框架的整合，是标准的MVC模式，将整个系统划分为表现层，controller层，service层，DAO层四层</p><p>各部分的功能：</p><ul><li>使用spring MVC负责请求的转发和视图管理</li><li><p>spring实现业务对象管理</p></li><li><p>mybatis作为数据对象的持久化引擎</p></li></ul></blockquote><h5 id="基础原理"><a href="#基础原理" class="headerlink" title="基础原理"></a>基础原理</h5><p>（概念？特点？作用？设计理念？）</p><h6 id="1️⃣javabean"><a href="#1️⃣javabean" class="headerlink" title="1️⃣javabean"></a>1️⃣javabean</h6><ul><li><p>相当于将一个java类封装成了一个可重用组件，比如一个类student，这个bean里面包括了<code>student.number、student.score、student.name</code>等属性以及对于这些属性值的修改设置等操作，全都封装在一个类中，并且可以在前端JSP页面调用获取数据，或是执行数据库访问操作等，使用这个对象</p></li><li><p>举例：</p></li></ul><p>比如我们在通过访问数据库获取到某个学生的姓名后，通过<code>student.setName()</code>的方法就可以把获取的数据保存在student的实例对象中，接着可以通过JSP页面的请求调用这一对象的数据，以<code>student.getName()</code>方法来获取；</p><ul><li>一个javabean包含如下特点<ul><li>JavaBean可以调用的方法<code>xxx.getA()、xxx.setA()</code></li><li>JavaBean提供的可读写的属性 <code>xxx.a</code></li><li>JavaBean向外部发送的或从外部接收的事件 </li><li>全局使用，但内部细节封装，只需生成实例来调用，相当于给一个接口与外界联系</li></ul></li></ul><h6 id="2️⃣spring"><a href="#2️⃣spring" class="headerlink" title="2️⃣spring"></a>2️⃣spring</h6><ul><li>Spring是一个轻量级的IOC和AOP容器框架。是为Java应用程序提供基础性服务的一套框架，目的是用于简化企业应用程序的开发，它使得开发者只需要关心业务需求。主要包括以下七个模块：</li></ul><blockquote><p>Spring Context：提供框架式的Bean访问方式，以及企业级功能（JNDI、定时任务等）；<br>Spring Core：核心类库，所有功能都依赖于该类库，提供<em>IOC</em>和<em>DI</em>服务；<br>Spring AOP：<em>AOP</em>服务；<br>Spring Web：提供了基本的面向Web的综合特性，提供对常见框架如Struts2的支持，Spring能够管理这些框架，将Spring的资源注入给框架，也能在这些框架的前后插入拦截器；<br>Spring MVC：提供面向Web应用的Model-View-Controller，即MVC实现。<br>Spring DAO：对JDBC的抽象封装，简化了数据访问异常的处理，并能统一管理JDBC事务；<br>Spring ORM：对现有的ORM框架的支持；</p></blockquote><h6 id="3️⃣mybatis"><a href="#3️⃣mybatis" class="headerlink" title="3️⃣mybatis"></a>3️⃣mybatis</h6><ul><li>支持普通 SQL查询，<a href="https://baike.baidu.com/item/存储过程">存储过程</a>和高级映射的优秀<a href="https://baike.baidu.com/item/持久层">持久层</a>框架。MyBatis 消除了几乎所有的<a href="https://baike.baidu.com/item/JDBC">JDBC</a>代码和参数的手工设置以及<a href="https://baike.baidu.com/item/结果集">结果集</a>的检索。MyBatis 使用简单的 XML或注解用于配置和原始映射，将接口和 Java 的POJOs（Plain Ordinary Java Objects，普通的 Java对象）映射成数据库中的记录。简单说：实现对数据库的操作不必像单纯使用sql语句那样复杂，正如一个类提供的接口一样，我们可以通过编写映射关系来封装某一种数据的操作</li></ul><h6 id="4️⃣springMVC"><a href="#4️⃣springMVC" class="headerlink" title="4️⃣springMVC"></a>4️⃣springMVC</h6><ul><li>一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把<code>Model</code>，<code>View</code>，<code>Controller</code>分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。</li></ul><h5 id="SMM-工作原理"><a href="#SMM-工作原理" class="headerlink" title="SMM 工作原理"></a>SMM 工作原理</h5><p>工作流程：浏览器发送数据请求，即在web层执行相应的controller，通过controller调用相应的service并配合MyBatis的使用对数据库进行各种便捷的操作以获取请求的数据，然后逐步返回数据到浏览器中进行渲染</p><ul><li>表现层（Web）：即负责渲染页面以及前后端之间的数据传递</li><li>业务层（Service）：按照业务要求去封装对数据层的操作（登录、注册账号这些都封装为接口）</li><li>数据访问层（DAO层）/持久层：负责直接对数据库操作以及提供给业务层调用的接口</li></ul><blockquote><ul><li><p>spring管理持久层的mapper，mapper通过映射可以实现关于数据库MySQL的SQL语句操作（比如查询数据等），相当于对外提供了一个数据库操作的接口，并且比直接使用sql语句对数据操作来的更加安全和方便、无需知道内部细节</p></li><li><p>业务层的service接口可以调用mappert提供的接口，也就是说我们在service层间接的实现了对数据库的操作，按照我们的目的带入参数去调用这些接口，就可以获取到数据保存到类的实例中（bean对象），而service 层又通过封装一些方法函数作为接口给到controller层，比如在controller请求数据后回传。</p></li><li>数据层，实现对数据库的增删查改操作，为什么要用mybatis？</li></ul></blockquote><p><em>举例</em>：展示mybatis的工作原理</p><ul><li>若要实现一种自定义的数据操作，可以发现实际就是将某一个操作与sql语句进行了映射，这样对于调用该接口的操作者来说无需知道细节，有利于各层的独立开发；更多XML映射器的写法见<a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html">mybatis – MyBatis 3 | XML 映射器</a></li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.hnust.eb.mapper.EbProductCategoryMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--List&lt;EbProductCategory&gt; selectBigCategory();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBigCategory&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.hnust.eb.model.EbProductCategory&quot;</span>&gt;</span><br>        select * from eb_product_category where epc_id =  epc_parent_id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//当我们需要调用上述接口时，声明mapper实例后即可调用，当然还可封装为带参数的接口</span><br>EbProductCategoryMapper ebProductCategoryMapper;<br>List&lt;EbProductCategory&gt; bigs = ebProductCategoryMapper.selectBigCategory();<br></code></pre></div></td></tr></table></figure><ul><li>图片来源 <a href="https://www.jianshu.com/p/771ff8e16adb">SSM三层架构 - 简书 (jianshu.com)</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Cuber-final/myblog_statics@master/posts/cnn01/svm.webp" alt="SSM三层架构"></p><h2 id="Android-应用开发"><a href="#Android-应用开发" class="headerlink" title="Android 应用开发"></a>Android 应用开发</h2><h3 id="股票行情分析软件"><a href="#股票行情分析软件" class="headerlink" title="股票行情分析软件"></a>股票行情分析软件</h3><h4 id="技术栈-应用框架，工具"><a href="#技术栈-应用框架，工具" class="headerlink" title="技术栈/应用框架，工具"></a>技术栈/应用框架，工具</h4><h5 id="1️⃣总览"><a href="#1️⃣总览" class="headerlink" title="1️⃣总览"></a>1️⃣总览</h5><blockquote><ul><li>java-Echarts 数据可视化插件，是echarts这一可视化库在java语言上的拓展实现</li><li>okhttps3多线程网络请求</li><li>jsoup网络爬取解析工具</li><li>fastjson 通过解析json文件提取数据的工具</li></ul></blockquote><h5 id="2️⃣详细原理"><a href="#2️⃣详细原理" class="headerlink" title="2️⃣详细原理"></a>2️⃣详细原理</h5><h6 id="爬数据-Okhttp3"><a href="#爬数据-Okhttp3" class="headerlink" title="爬数据 Okhttp3"></a><strong>爬数据</strong> Okhttp3</h6><ol><li>软件内获取到的数据由于都是来自网络，因此需要先确定爬取源数据的网站，找的是某个股票资讯网站；</li><li>解析网站的网页源码，使用okhttp3可以发送一个client（客户端如浏览器）的网络请求至目标网址，然后将请求返回的网页源码转成字符串数据，那么我只需要在找出数据在原网页代码中的位置，调用相应的方法就可以在这一大串的字符串中指定截取出数据并保存到定义好的java对象实例中以便后续调用；</li></ol><p>为何要用异步请求？</p><ul><li>同步请求是顺序处理网络请求，多个请求依次被响应，可想而知，如果排在前面的请求迟迟不被响应，将会浪费时间和内存，较少了程序运行效率</li><li>异步请求则不同，可以被并行处理，在服务器响应返回结果之前，程序可以进行其他的操作，这和计算机组成原理的DMA方式异曲同工，但DMA讲的是总线控制权的问题，当DMA准备工作做好时，CPU主动让出总线控制权进行DMA工作</li></ul><p>优缺点</p><ul><li><p>优点</p><ul><li><p>okhttp3可以在网络请求的任意步骤中intercept 阻拦（拦截器）</p></li><li><p>在异步请求中，通过Callback来获得简单清晰的请求回调(onFailure、onResponse)</p></li><li><p>可实现同一IP地址和端口的请求重用一个socket能够大大降低网络连接时间提高效率，也降低了服务器的压力</p></li><li><p>支持多线程请求，这样可以提高程序运行效率，</p></li></ul></li><li><p>缺点</p><ul><li>由于请求回调是在子线程中执行的，因此不能（主线程就是UI线程，负责更新UI）及时刷新android 的UI，当然也有办法，主要是<code>runOnUiThread()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Handler mHandler = <span class="hljs-keyword">new</span> Handler();<br><span class="hljs-keyword">private</span> Thread mUiThread;<br><span class="hljs-comment">// ...</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">runOnUiThread</span><span class="hljs-params">(Runnable action)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (Thread.currentThread() != mUiThread) &#123;<br>        mHandler.post(action);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>         action.run();<br>     &#125;<br><span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">//首先在主线程里通过无参的构造方法创建一个Handler，这个Handler是指向主线程的。Handler是负责放置消息的</span><br><span class="hljs-comment">//当执行runOnUiThread()时，当前线程不是主线程</span><br><span class="hljs-comment">//调用mHandler.post(action)，将Runnable添加到主线程的消息队列中这样，Runnable的语句就是在主线程执行的了。</span><br><br></code></pre></div></td></tr></table></figure></li></ul><h6 id="解析数据"><a href="#解析数据" class="headerlink" title="解析数据"></a><strong>解析数据</strong></h6><ul><li>okhttp3获取到网页HTML代码的字符串后，需要通过jsoup来解析，首先需要将html字符串内容转换成document类才能根据html标签等方式进行更方便的解析以获取数据集，主要以<code>doc.select(&quot;div[class=&#39;...&#39;]&quot;)</code>这样的方式获取</li></ul><h6 id="UI设计与数据的渲染"><a href="#UI设计与数据的渲染" class="headerlink" title="UI设计与数据的渲染"></a><strong>UI设计与数据的渲染</strong></h6><ul><li>将数据获取并解析后，保存到一开始就定义好的类的实例对象中，就可以在activity中调用了，剩下的工作就是将数据和UI界面的常用组件绑定在一起，运行打包好的软件就可以实时看到了</li></ul><h6 id="模糊搜索与全局搜索"><a href="#模糊搜索与全局搜索" class="headerlink" title="模糊搜索与全局搜索"></a><strong>模糊搜索与全局搜索</strong></h6><ul><li>用什么算法较好？</li></ul><h6 id="优化设计"><a href="#优化设计" class="headerlink" title="优化设计"></a><strong>优化设计</strong></h6><ul><li>股票信息全局的搜索</li><li>下拉刷新最新的新闻资讯（WebView）</li><li>UI的美化</li><li>用户信息的存储</li></ul><h2 id="机器学习实战"><a href="#机器学习实战" class="headerlink" title="机器学习实战"></a>机器学习实战</h2><h3 id="垃圾分类"><a href="#垃圾分类" class="headerlink" title="垃圾分类"></a>垃圾分类</h3><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ul><li>数据准备</li><li>网络配置</li><li>模型训练</li><li>模型验证</li><li>模型预测<ul><li>将模型下载到本地，使用模型对目标进行预测，看能否正确预测（在本地写代码进行测试）</li></ul></li><li>模型部署，开发应用</li></ul><h4 id="开发记录"><a href="#开发记录" class="headerlink" title="开发记录"></a>开发记录</h4><h5 id="问题与解决方案"><a href="#问题与解决方案" class="headerlink" title="问题与解决方案"></a>问题与解决方案</h5><ul><li><h6 id="数据集的选取"><a href="#数据集的选取" class="headerlink" title="数据集的选取"></a>数据集的选取</h6></li></ul><blockquote><p>华为云的垃圾分类数据集</p><p>ImageNet格式下的垃圾分类图片数据</p></blockquote><ul><li><h6 id="数据的处理"><a href="#数据的处理" class="headerlink" title="数据的处理"></a>数据的处理</h6><ul><li>数据增广：图片的增广方式有多种，需要根据实际工作环境来确定，主要分为<ul><li>亮度，对比度，色域RGB</li><li>随机裁剪，选取区域，缩放</li><li>旋转，水平翻转</li><li>多种方法组合</li></ul></li></ul></li></ul><h6 id="网络结构与改进-ResNet-ResNet-SSLD"><a href="#网络结构与改进-ResNet-ResNet-SSLD" class="headerlink" title="网络结构与改进 ResNet - ResNet SSLD"></a>网络结构与改进 ResNet - ResNet SSLD</h6><blockquote><p>VGG 重复3*3的小卷积结构增加网络深度，深度增加感受野增加，同时学习到更丰富的网络特征。</p><p>GoogLeNet通过不同尺度的卷积核堆叠增加网络宽度，学习不同尺度的信息。</p><p>ResNet使用残差结构使网络拥有恒等映射的能力，改善网络退化问题。</p></blockquote><h5 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h5><ul><li>比较选择合适优化器</li><li>迁移学习（需要深入理解）</li><li><strong>需要对比</strong>：选择不同的优化器和学习率以及batch_size来进行训练，并形成对比（如何制作对比图表）</li></ul><h4 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h4><h5 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a><code>网络模型</code></h5><h6 id="1️⃣LeNet-老模型了，具有学习意义"><a href="#1️⃣LeNet-老模型了，具有学习意义" class="headerlink" title="1️⃣LeNet 老模型了，具有学习意义"></a>1️⃣LeNet 老模型了，具有学习意义</h6><h6 id="2️⃣-AlexNet"><a href="#2️⃣-AlexNet" class="headerlink" title="2️⃣ AlexNet"></a>2️⃣ AlexNet</h6><ul><li>LRN</li><li>ReLu</li><li>Dropout</li></ul><h6 id="3️⃣-VGGNet"><a href="#3️⃣-VGGNet" class="headerlink" title="3️⃣ VGGNet"></a>3️⃣ VGGNet</h6><ul><li>非线性映射能力-因为参与影响的因素越多，关系是多维的而且不是直线的？</li></ul><h6 id="4️⃣"><a href="#4️⃣" class="headerlink" title="4️⃣"></a>4️⃣</h6><h5 id="关于一些代码的原理分析"><a href="#关于一些代码的原理分析" class="headerlink" title="关于一些代码的原理分析"></a><strong>关于一些代码的原理分析</strong></h5><ul><li>HWC to CHW ： 由于要采用GPU进行训练，将数据的形状转换有利于GPU的训练</li><li>IMG *= 0.007843 ：像素值归一化的操作，亦有 IMG/=255 ，但这个浮点数为何而来</li><li>使用CPU还是GPU进行训练</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#-------------通过paddle.fluid使用</span><br><span class="hljs-comment">#定义使用CPU还是GPU，使用CPU时use_cuda = False,使用GPU时use_cuda = True</span><br>use_cuda = <span class="hljs-literal">True</span><br>place = fluid.CUDAPlace(<span class="hljs-number">0</span>) <span class="hljs-keyword">if</span> use_cuda <span class="hljs-keyword">else</span> fluid.CPUPlace()<br><span class="hljs-comment">#用CPU好还是GPU好？</span><br><br><span class="hljs-comment">#---------------------在paddle中使用</span><br><span class="hljs-keyword">import</span> paddle<br><span class="hljs-built_in">print</span>(paddle.device.get_device())<br>paddle.device.set_device(<span class="hljs-string">&#x27;cpu&#x27;</span>) <span class="hljs-comment"># 把get—device的结果直接复制进去</span><br></code></pre></div></td></tr></table></figure><h4 id="遭遇问题"><a href="#遭遇问题" class="headerlink" title="遭遇问题"></a><strong>遭遇问题</strong></h4><ol><li>训练过程中要记录每一batch完之后的损失以及正确率等，但是在训练的过程中往往最后一次得到的参数并不是最佳的，由于算法的缺陷导致参数的不稳定，那么我们怎么能够在训练完之后，选出这之中训练效果最好的一次呢？也就是说我们需要保存最佳的一次参数？<code>如何做--K折交叉验证</code></li></ol><ul><li>[x] 保存训练过程中的最佳模型（实际是参数的集合）</li><li>[x] 将训练过程的指标可视化</li></ul><h2 id="Django-小程序开发"><a href="#Django-小程序开发" class="headerlink" title="Django+小程序开发"></a>Django+小程序开发</h2><h3 id="项目思路"><a href="#项目思路" class="headerlink" title="项目思路"></a>项目思路</h3><h4 id="客户端（小程序）"><a href="#客户端（小程序）" class="headerlink" title="客户端（小程序）"></a><strong>客户端（小程序）</strong></h4><h5 id="1️⃣界面的设计"><a href="#1️⃣界面的设计" class="headerlink" title="1️⃣界面的设计"></a>1️⃣<code>界面的设计</code></h5><p>小程序的界面依据功能需求分析，主要分为首页、用户信息页（两个足够）；分类百科（用户直接浏览各种垃圾所属分类的信息）</p><h6 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h6><p>元素设计：</p><ul><li><p>[x] 触发查看用户信息页面的图标 </p></li><li><p>[x] 文本搜索按钮进入，方案</p><p>1️⃣<del>弹出一个小窗口可以输入然后返回结果</del></p><p>2️⃣直接跳转到一个比较缺少内容的简单页面直接输入文本进行搜索，然后再弹窗输出结果；并还能够在该页面增加一个额外的功能，体现数据库的增删查改，比如<code>一个错误结果</code>的改正、<code>不存在的条目</code>的增加</p></li><li><p>[ ] 拍照功能按钮 —&gt;查询数据库返回结果—&gt;弹窗显示，能否给出几个结果，并且是按照置信度递增或递减排列显示</p></li><li><p>[x] 轮播图（点缀）</p></li><li><p>[x] 用户中心的历史记录查询入口—-历史记录，分包加载；使用POST接口传递用户id到后端查询即可</p></li><li><p>[x] 使用手册入口-使用手册，分包加载</p></li></ul><h6 id="用户信息页"><a href="#用户信息页" class="headerlink" title="用户信息页"></a>用户信息页</h6><p>元素设计：</p><ul><li>[x] 头像名称—绑定全局共享变量</li><li>[x] 按钮展示，grid-list设计</li></ul><h6 id="分类百科"><a href="#分类百科" class="headerlink" title="分类百科"></a>分类百科</h6><p>元素设计：</p><ul><li>[ ] 列表呈现一些生活小常识</li></ul><blockquote><p><code>问题</code></p><ol><li>全局变量存储机制，不能简单的通过设置<code>const app=getApp()</code>来修改全局变量值，采取更好的方式</li><li>接口调用时，对于集合的结果，尽量使用循环语句，将结果按规律呈现</li><li>分包的预加载选项，后期可以尝试，在进入指定的某一页面后选择加载指定的分包数据，这样当浏览该分包页面时就能够比较流畅的进入了</li><li><del>API的promise化能够很好的解决回调地狱的问题，是比较好的API请求迭代方式</del></li></ol></blockquote><h5 id="2️⃣交互功能的逻辑编写"><a href="#2️⃣交互功能的逻辑编写" class="headerlink" title="2️⃣交互功能的逻辑编写"></a>2️⃣交互功能的逻辑编写</h5><p>1️⃣进入小程序首页，弹窗登录提示，选择登录/游客（后台存储用户信息到临时缓存中）</p><ul><li>[x] 点击登录进入登录页面，登录注册完成后重新进入首页，此时系统可使用的功能是用户模式下的</li><li>[x] 点击游客则关闭弹窗，此时系统的功能仅为游客模式下的</li></ul><p>具体实现步骤：</p><ul><li>在<code>app.js</code>中调用内置函数<code>setStorage</code>在小程序刚启动时注册全局信息到缓存中</li><li>进入首页后，同样在<code>home/index.js</code>下加载方法，并读取全局信息根据登录状态，设置提示登录弹窗，包含游客和登录两个选择<ul><li>[x] 选择游客后，将会调用函数<code>setStorage</code>将<code>use_status</code>设置为游客模式，后台的API会进行对应模式下的处理</li><li>[x] 选择用户后，进入登录/注册页面，通过输入表单信息进行注册或登录，完成后将重新跳转到主页，并弹出类似<code>欢迎用户XX</code>的提示框以告知你的登录状态，表单输入过程中注意双向绑定数据，及时更新</li><li>[x] 如果游客模式下想要登录，可在<strong>用户中心</strong>页面进行登录（点击头像或用户名），登录界面相关的操作和上面步骤相同</li></ul></li></ul><p>2️⃣ 渲染指南页面</p><ul><li>调用API获取一级垃圾分类数据，设置左侧一级滚动侧边栏的激活方式<ul><li>[x] API调用设置参数的问题，要检索出所有一级分类</li><li>[x] 设计列表样式，一级与二级不同，且具备激活状态</li></ul></li><li>获取对应一级分类下的二级分类数据，通过一级分类的id作为参数调用API在数据库检索</li><li>可以添加垃圾分类知识相关的内容</li></ul><p><strong>完成情况</strong>：<em>已完成</em></p><p>3️⃣ 在搜索框输入可以文字搜索垃圾所属分类，跳转到新页面获取，搜索框可以重置</p><ul><li>[x] 封装API，设计首页输入框的样式</li><li>[x] 触发搜索后跳转到结果显示页面，携带从服务端返回的结果数据，渲染到结果页，附加对应的垃圾分类知识</li><li>[ ] 文字搜索若无结果，则可以提交更新分类信息到后台，再由后台管理后续审核</li></ul><p><strong>完成情况</strong>：<em>已完成</em></p><p>4️⃣ 实现拍照识别功能</p><ul><li>[x] 测试模型的推测功能能否在本地使用 </li><li><p>[ ] 功能封装成API，调用API可能返回结果的等待时间会长一些，可以设置一个<code>加载动画</code>来过渡</p></li><li><p>[ ] 结果不是唯一，而是按照置信度多个成列表递减显示</p></li><li>[x] 已登录状态下仍会保存查询记录信息</li><li>[ ] 对拍照识别结果提出纠正，并同步到数据库中，在数据库后台显示的时候根据<code>file_path</code>字段来判断，若为默认值即未写入图像，则渲染为空的<code>div</code>；否则显示图片</li></ul><blockquote><p>文字查询通过<strong>查询内容</strong>体现，更新查询内容，无需设置文件路径</p><p>图像识别通过<strong>上传图像</strong>体现，将用户确认后的查询内容提交，更新查询内容和文件路径，以及审核状态</p><p>查询结果用正确的；纠正的，纠正的由后台进行审核；图像上传到后台，将保存，用于后续模型训练</p><p>从多个里面选择一个加以确认或者找不到的结果提出纠正，并交由后台进行处理</p></blockquote><p>小程序端调用并同样跳转到新页面显示结果</p><p><strong>完成情况</strong>： 拍照识别预测功能可正常运行，有待完善</p><blockquote><ul><li>用户权限：所有可用功能，包括增加分类数据，修改密码等</li><li>游客的权限：不保存搜索记录的情况下<ul><li>拍照搜索</li><li>文字搜索</li></ul></li></ul></blockquote><h4 id="服务端（Django"><a href="#服务端（Django" class="headerlink" title="服务端（Django)"></a><strong>服务端（Django)</strong></h4><h5 id="1️⃣数据库设计"><a href="#1️⃣数据库设计" class="headerlink" title="1️⃣数据库设计"></a>1️⃣数据库设计</h5><ul><li><p>根据系统的功能需求分析，本系统需要使用的数据信息表有三个 <code>TC_USER、TC_CATE、TC_SEARCH</code>，分别表示用户信息，垃圾分类信息以及用户搜索历史</p><p>各模型的数据格式如下图示：</p></li></ul><p>User模型的自定义</p><blockquote><p>由于Django自带了User模型，但为了方便并且符合我自己的设定，需要对默认的User模型进行覆写，重新定义一个自己的User模型并将其设置为系统使用的默认User模型。步骤如下：</p></blockquote><p><strong>问题</strong></p><ul><li>使用不同的方式添加用户信息条目到数据库时，密码并不全是加密显示</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#使用这种方式，添加到数据库的密码是明文显示的</span><br>newUser = TcUser()<br>newUser.username = username<br>newUser.password = password<br>newUser.save()<br><br><span class="hljs-comment">#用下面的方式，我的理解是由于调用的是我自定义的UserManager，包含了set_password()方法会自动对密码加密</span><br>TcUser.objects.create_user(username=username,password=password)<br></code></pre></div></td></tr></table></figure><p><em>引申点</em>：如果当我要修改用户密码时，怎样能够保证修改的密码依然是加密形式的；更新数据库的信息也有默认的<code>update()</code>方法但会出现和<code>save()</code>一样的情况吗</p><ul><li>使用mysql</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 查看所有用户信息<br>SELECT User, Host, Password FROM mysql.user;<br>#为指定用户设置新密码<br>set password for usernname@localhost = &#x27;123456&#x27;;<br></code></pre></div></td></tr></table></figure><hr><p><em>先将用户登录以及注册相关API实现，不着急其他功能，接下来转向小程序端进行设计，为了测试是否能够顺利地通过小程序与Django进行数据通讯</em></p><blockquote><p>微信小程序有它自己的微信用户验证登录方式，暂时不采用，将来可以更换这种登录方式</p></blockquote><hr><p>利用Postman进行一个简单的接口调用测试（实现登录验证的功能）</p><ol><li>登录状态的保持，对于小程序数据生命周期的理解</li></ol><blockquote><ul><li>globalData：存储<strong>短期</strong>数据，引入 app.js 可访问，彻底关闭小程序数据消失 (也就设置全局变量，但需要通过app.js引用)</li><li>Storage：存储<strong>长期</strong>数据，全局可访问，移除小程序数据消失</li><li>后端服务器：存储跨设备的数据，通过后端授权后可访问，只要服务器不炸数据<strong>永存</strong></li></ul></blockquote><ol><li>从用户中心跳转查看历史数据时，设置navigate跳转的<code>url</code>字段需要携带参数<code>?userid=xxx</code>，这样就可以通过后台查询对应用户的历史记录</li></ol><p>其他数据表的建立代码展示….</p><h5 id="2️⃣API编写"><a href="#2️⃣API编写" class="headerlink" title="2️⃣API编写"></a>2️⃣<code>API编写</code></h5><p>一、用户信息相关的功能</p><ul><li>[x] 用户登录—核对账号与密码</li><li>[x] 用户注册的功能—核对账户与密码，没有则创建</li></ul><p>二、拍照识功能</p><p>三、搜索垃圾分类</p><ol><li>引用素材问题，借助图床外部引入图片，并且借助循环语句，只要上传时按顺序编号即可方便引用</li><li>文字搜索功能</li></ol><h5 id="3️⃣与客户端进行通讯"><a href="#3️⃣与客户端进行通讯" class="headerlink" title="3️⃣与客户端进行通讯"></a>3️⃣与客户端进行通讯</h5><h5 id="4️⃣使用深度学习模型"><a href="#4️⃣使用深度学习模型" class="headerlink" title="4️⃣使用深度学习模型"></a>4️⃣<code>使用深度学习模型</code></h5><hr><h5 style="color:#e9c46a"> 开发补充 </h5><ul><li>开发过程用到git代码管理</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 删除本地分支</span><br>git branch -d branch_name <br><br><span class="hljs-comment"># 删除远程仓库的分支</span><br>git push origin --delete branch_name<br><br><span class="hljs-comment">#更新代码,先融合本地与远程</span><br>git pull origin branch_name<br>git add .<br>git commit -m <span class="hljs-string">&quot;message&quot;</span><br>git push origin branch_name<br><br><span class="hljs-comment">#切换分支（添加新分支）</span><br>git checkout -b branch_name<br><br><span class="hljs-comment">#单独提交一个项目代码到一个已有仓库的新分支下</span><br>git checkout -b new_branch <span class="hljs-comment">#创建新分支</span><br>git status <span class="hljs-comment">#查看装填，是否需要指定某一文件夹上传</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;msg&quot;</span><br>git remote add origin your_repository_address <span class="hljs-comment">#指向仓库地址，origin此时就是指代这个仓库</span><br>git push origin new_branch <span class="hljs-comment">#将代码同步到远程仓库的新分支</span><br><br><span class="hljs-comment">#如果要更新该分支的代码</span><br>git pull origin new_branch<br><br></code></pre></div></td></tr></table></figure><ul><li>Django.httprequest.POST的对象类型是一个QuerySet（类似字典对象，属于继承），需要理解他的一些内置属性<ul><li><code>request.post.get(&#39;name&#39;)</code>可以获取请求报文中携带的表单中的指定变量的数据</li></ul></li></ul><p><strong>待解决问题</strong>：</p><ul><li><p>在Django环境下单独运行Python脚本</p></li><li><p>Django项目需要生成requirements.txt 上传到github</p></li></ul><h3 id="开题报告"><a href="#开题报告" class="headerlink" title="开题报告"></a><code>开题报告</code></h3><h6 id="研究背景与意义"><a href="#研究背景与意义" class="headerlink" title="研究背景与意义"></a>研究背景与意义</h6><ul><li>垃圾分类的概念与作用</li><li>垃圾分类在我国的发展，垃圾分类在国外的进行状况对比</li><li>垃圾分类目前发展的瓶颈即遇到的困难，比如公民垃圾分类意识淡薄</li></ul><blockquote><p>垃圾分类有利于保护环境，可是，严苛的分类标准和条例却让国人叫苦不迭，由于人为处理较为复杂、意识和习惯未形成，“垃圾分类难”深深困扰着大众。垃圾智能回收箱、垃圾分类机器人可助力垃圾分类。</p></blockquote><ul><li>引出智能化的重要性，以及小程序作为用户端的可行性，然后是我的项目是如何做的，带来怎么样的好处</li></ul><p>参考百度词条补充内容 <a href="[垃圾分类_百度百科 (baidu.com">垃圾分类</a>](<a href="https://baike.baidu.com/item/垃圾分类/2904193">https://baike.baidu.com/item/垃圾分类/2904193</a>))</p><h6 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h6><p>系统的工作机制和用户操作流程？</p><h6 id="拟研究方法"><a href="#拟研究方法" class="headerlink" title="拟研究方法"></a>拟研究方法</h6><ol><li>测试时，10-cross testing方式随机测试</li><li>训练时采取多种修改分辨率（图像尺寸）</li><li>图像增强可以举例子展示</li></ol><p>实验对比：垃圾分类40类</p><div class="table-container"><table><thead><tr><th style="text-align:center">ResNet（layer）</th><th style="text-align:center">训练批次</th><th style="text-align:center">batch_size</th><th style="text-align:center">优化器</th><th style="text-align:center">学习率</th><th style="text-align:center">验证集精确度</th></tr></thead><tbody><tr><td style="text-align:center">ResNet50</td><td style="text-align:center">50</td><td style="text-align:center">128</td><td style="text-align:center">Adam</td><td style="text-align:center">0.001</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">50</td><td style="text-align:center">50</td><td style="text-align:center">128</td><td style="text-align:center">SGD</td><td style="text-align:center">decay</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">50</td><td style="text-align:center">50</td><td style="text-align:center">128</td><td style="text-align:center">SGDM</td><td style="text-align:center">分段设置学习率</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">101</td><td style="text-align:center">50</td><td style="text-align:center">128</td><td style="text-align:center">Adam</td><td style="text-align:center">0.001</td><td style="text-align:center">0.51</td></tr><tr><td style="text-align:center">101</td><td style="text-align:center">50</td><td style="text-align:center">128</td><td style="text-align:center">SGD</td><td style="text-align:center">分段学习率</td><td style="text-align:center">0.68</td></tr><tr><td style="text-align:center">34</td><td style="text-align:center">50</td><td style="text-align:center">128</td><td style="text-align:center">SGDM</td><td style="text-align:center">分段学习率</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">50</td><td style="text-align:center">50</td><td style="text-align:center">128</td><td style="text-align:center">SGDM</td><td style="text-align:center">分段学习率</td><td style="text-align:center">0.68</td></tr><tr><td style="text-align:center">50</td><td style="text-align:center">50</td><td style="text-align:center">32</td><td style="text-align:center">SGDM</td><td style="text-align:center">分段学习率</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">101</td><td style="text-align:center">50</td><td style="text-align:center">128</td><td style="text-align:center">SGDM</td><td style="text-align:center">分段学习率</td><td style="text-align:center">0.70</td></tr><tr><td style="text-align:center">152</td><td style="text-align:center">50</td><td style="text-align:center">128</td><td style="text-align:center">SGDM</td><td style="text-align:center">分段学习率</td><td style="text-align:center">0.71</td></tr></tbody></table></div><hr><h6 id="数据分布"><a href="#数据分布" class="headerlink" title="数据分布"></a><strong>数据分布</strong></h6><ul><li>将数据集分布情况可视化，先存到json文件中，然后放到本地用echarts来制作，更方便且更优化</li><li>对数据量较少的数据集进行适当补充</li></ul><p>垃圾分类知识</p><ol><li>可回收物：废纸，塑料，金属，玻璃制品和布料</li><li>湿垃圾：剩菜剩饭、瓜皮果核、花芬绿植、过期食品（膨化食品，零食，变质面包）、茶叶</li><li>有害垃圾：</li><li>干垃圾：餐盒、餐巾纸、湿纸巾、卫生间用纸、塑料袋、食品包装袋、污染严重的纸、烟蒂、纸尿裤、一次性杯子、大骨头、贝壳、花盆、陶瓷等</li></ol><p>对来自多方的数据集进行合并重新筛查，删掉一些大小过小的无法提取特征的图片，可以再爬取一些图片</p><p><code>数据集问题</code></p><blockquote><ol><li>牙膏与牙膏盒子是不同类的，盒子一般纸质，可回收；牙膏皮牙膏都是其他垃圾</li><li>数据集太小<ul><li>训练过程中使用数据增广</li><li>数据集存在部分图片几乎相同，重叠的问题</li><li>使用k折交叉验证设置验证集来优化训练效果，k设置5或者10，但这样就意味着训练过程费时间费算力<ul><li>该方法的目的是什么？是保证所有数据都能够参与训练，最后我们只需要关注参数改变为模型效果带来的影响（以后做）</li></ul></li><li></li></ul></li></ol></blockquote><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>学习的是使用框架以及图像分类的操作思路，但不是虽然可以用封装好的方法去模拟训练过程，但还是有很多细节不懂</li><li><p>模型学的究竟是什么东西，权重的含义是什么，是如何表达出目标语义信息的？</p><ul><li>卷积神经网络学到的东西有哪些—图像的信息有哪些？</li><li>特征是如何表达的，不同的通道存储了哪些信息，又是如何存储的</li></ul></li><li><p>ReLU、激活函数的概念，作用，带来的优势又是如何体现的</p></li><li><p>最大池化的好处在于，该方法放大了一个被找到的图像特征与其他特征的相对位置的关系的重要性，要比该特征在同一张图像中的具体位置更为重要。</p><blockquote><p>如何理解？—特征之间的相对位置，层次感</p></blockquote></li></ul><hr><h3 id="毕业论文"><a href="#毕业论文" class="headerlink" title="毕业论文"></a>毕业论文</h3><p>有待补充，调参过程以及实验对比结果展示</p><p>对网络结构还需要深入了解</p><p>答辩问题：</p><ol><li>为什么要用ResNet?</li></ol><blockquote><p>寻找可量化比较的数据来对比ResNet与其他网络，得出使用ResNet是相对好的</p></blockquote><ol><li>ResNet的特点</li></ol><blockquote><ul><li>残差块</li><li>捷径连接，防止了过拟合</li><li>使用了含瓶颈结构的残差块来堆叠，瓶颈结构可以在训练过程中降低纬度，然后再还原；</li><li>可以在训练过程中减少参数量，进而减少了运算占用内存</li></ul></blockquote><ol><li>图像处理时，没有使用等比例缩放与使用等比例缩放的效果对比</li><li>为什么要卷积核的相加，然后才说统一尺寸；卷积核的个数又是如何确定的？</li><li>每一个卷积层的操作是怎么计算的？</li><li>BN与ReLU的顺序能否更换？</li></ol>]]></content>
    
    
    <categories>
      
      <category>技术拓展</category>
      
      <category>毕业设计</category>
      
      <category>技术栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web-Dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid主题的个性化拓展</title>
    <link href="/fluid01/"/>
    <url>/fluid01/</url>
    
    <content type="html"><![CDATA[<h2 id="目前博客个性化进度"><a href="#目前博客个性化进度" class="headerlink" title="目前博客个性化进度"></a>目前博客个性化进度</h2><ol><li>完成了配色修改，了解了一下配置项写法和CSS的修改方式</li><li>标签云并没有达到理想的状态，但也足矣</li></ol><h3 id="目标功能玩法"><a href="#目标功能玩法" class="headerlink" title="目标功能玩法"></a>目标功能玩法</h3><h4 id="添加网站运行时间"><a href="#添加网站运行时间" class="headerlink" title="添加网站运行时间"></a>添加网站运行时间</h4><ul><li>已完成，按照相关教程即可</li></ul><h4 id="归档页面—-TimeLine"><a href="#归档页面—-TimeLine" class="headerlink" title="归档页面—-TimeLine"></a>归档页面—-TimeLine</h4><h4 id="echart实现数据统计可视化"><a href="#echart实现数据统计可视化" class="headerlink" title="echart实现数据统计可视化"></a>echart实现数据统计可视化</h4><h4 id="在线实验项目"><a href="#在线实验项目" class="headerlink" title="在线实验项目"></a>在线实验项目</h4><ul><li>机器学习<ul><li>模型部署到云端</li><li>制作API调用</li><li>通过实验室的某一功能指定实现，以下方式可行？<ul><li>上传文件</li><li>表单输入，传递参数，点击发送</li></ul></li></ul></li></ul><h4 id="修改Markdown样式，优化视觉效果"><a href="#修改Markdown样式，优化视觉效果" class="headerlink" title="修改Markdown样式，优化视觉效果"></a>修改Markdown样式，优化视觉效果</h4><ul><li>根据配置模拟为Typora的主题Mo dark</li><li>公式使用问题</li></ul><script type="math/tex; mode=display">t即为输出，b为偏置单元，w_i为权重，x_i为输入单元\\t=f(\sum_{i=1}^nw_ix_i+b)=f(\mathbf{w}^T\mathbf{x})\\\sum_{i=1}^nw_ix_i+b 正是'分界线'\\其数值大小无非以下，直接带入激活函数便能得到判断结果\\\sum_{i=1}^nw_ix_i+b\begin{cases}\geq 0 \\[2ex]<0\end{cases}\\\mathbf{w}^T\mathbf{x} ，是上一公式的简化写法，在计算机中使用向量的计算（矩阵点积）</script><ul><li><p>测试Latex语法的支持效果，以及检测BUG，hexo的LaTeX效果不如Typora，<strong>多行公式</strong>需要用 <code>\begin&#123;aligned&#125; ... \end&#123;aligned&#125;</code>，换行符 <code>\\</code> 和定位符 <code>&amp;</code>。添加了这些代码内容后，渲染正常如下</p></li><li><p>代码块折叠实现</p><ul><li><p>打开文章默认代码折叠</p></li><li><p>通过折叠代码按钮可以实现代码的折叠与打开</p></li></ul></li></ul><p>实现步骤：</p><ol><li>找到copy-btn所在位置，看能否通过js添加折叠代码块按钮</li><li>写脚本</li></ol><h3 id="使用Echarts制图"><a href="#使用Echarts制图" class="headerlink" title="使用Echarts制图"></a>使用Echarts制图</h3><ul><li>[x] 完成</li></ul><h5 id="制作仿造GitHub的日历图"><a href="#制作仿造GitHub的日历图" class="headerlink" title="制作仿造GitHub的日历图"></a>制作仿造GitHub的日历图</h5><p>1️⃣制图</p><ul><li>先使用hexo-tag-echarts 插件写入md文件中制作简单的图表（制图）</li></ul><p>2️⃣绑定数据</p><ol><li>先将数据获取并渲染到<code>about</code>页面中</li></ol><ul><li>通过<code>ejs</code>注入的方式，插入到<code>about</code>的<code>html样式</code>中，通过<code>site.posts</code>变量获取所有文章的信息</li></ul><ol><li>在.md中直接插入<code>JavaScript</code>脚本，通过获取页面指定DOM元素形成数据集合，然后自定义<code>function</code>方法对图标的数据进行初始化和更新</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//echart_make.js</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">var dom = document.getElementById(&quot;container&quot;)</span><br><span class="hljs-comment">var myChart = echarts.init(dom)</span><br><span class="hljs-comment">var app = &#123;&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//获取今年年份</span><br><span class="hljs-keyword">var</span> thisYear = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear()<br><span class="hljs-keyword">var</span> option<br><br><span class="hljs-comment">//计算是今年的第几天</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseDate</span>(<span class="hljs-params">year, month, day</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> feb = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;<br>        feb = <span class="hljs-number">29</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        feb = <span class="hljs-number">28</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> sum = day<br>    <span class="hljs-keyword">var</span> months = [<span class="hljs-number">0</span>, <span class="hljs-number">31</span>, feb, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>]<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= month; i++) &#123;<br>        sum += months[i - <span class="hljs-number">1</span>]<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(sum)<br>    <span class="hljs-keyword">return</span> sum<br>&#125;<br><br><span class="hljs-comment">//解决如何填入年份作为数据以及该日提交文章数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getVirtualData</span>(<span class="hljs-params">year</span>) </span>&#123;<br>    year = year;<br>    <span class="hljs-keyword">var</span> date = +echarts.number.parseDate(year + <span class="hljs-string">&#x27;-01-01&#x27;</span>);<br>    <span class="hljs-keyword">var</span> end = +echarts.number.parseDate(+year + <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;-01-01&#x27;</span>);<br>    <span class="hljs-keyword">var</span> dayTime = <span class="hljs-number">3600</span> * <span class="hljs-number">24</span> * <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">var</span> dateMap = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> time = date; time &lt; end; time += dayTime) &#123;<br>        dateMap.push([<br>            echarts.format.formatTime(<span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>, time),<br>            <span class="hljs-number">0</span><br>        ]);<br>    &#125;<br>    <span class="hljs-comment">//对日历图进行更新</span><br>    <span class="hljs-keyword">var</span> dates = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;date-map&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; dates.length; i++) &#123; <span class="hljs-comment">//循环获取每个input表单元素值</span><br>        <span class="hljs-keyword">var</span> text = dates[i].innerText <span class="hljs-comment">//通过innerText或者innerHTML获取元素的文本值</span><br>        <span class="hljs-keyword">var</span> year = <span class="hljs-built_in">Number</span>(text.slice(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>))<br>        <span class="hljs-keyword">var</span> month = <span class="hljs-built_in">Number</span>(text.slice(<span class="hljs-number">5</span>, <span class="hljs-number">7</span>))<br>        <span class="hljs-keyword">var</span> day = <span class="hljs-built_in">Number</span>(text.slice(<span class="hljs-number">8</span>, <span class="hljs-number">10</span>))<br>        <span class="hljs-built_in">console</span>.log(year, month, day)<br>        <span class="hljs-keyword">if</span> (year == thisYear) &#123;<br>            <span class="hljs-keyword">var</span> date = parseDate(year, month, day)<br>            dateMap[date - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] += <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dateMap<br>&#125;;<br><br><br><span class="hljs-comment">//------------about/index.md----------</span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/echarts@4.8.0/dist/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/echart_make.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br>&#123;% echarts <span class="hljs-number">300</span> <span class="hljs-string">&#x27;85%&#x27;</span> %&#125;<br>option = &#123;<br>        <span class="hljs-attr">title</span>: &#123;<br>            <span class="hljs-attr">top</span>: <span class="hljs-number">20</span>,<br>            <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;center&#x27;</span>,<br>            <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Publish&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">tooltip</span>: &#123;&#125;,<br>        <span class="hljs-attr">visualMap</span>: &#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;piecewise&#x27;</span>,<br>            <span class="hljs-attr">orient</span>: <span class="hljs-string">&#x27;horizontal&#x27;</span>,<br>            <span class="hljs-attr">pieces</span>: [<br>                &#123; <span class="hljs-attr">gte</span>: <span class="hljs-number">31</span> &#125;,<br>                &#123; <span class="hljs-attr">gte</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">lt</span>: <span class="hljs-number">31</span> &#125;,<br>                &#123; <span class="hljs-attr">gte</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">lt</span>: <span class="hljs-number">21</span> &#125;,<br>                &#123; <span class="hljs-attr">gte</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">lt</span>: <span class="hljs-number">11</span> &#125;,<br>                &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#fff&#x27;</span> &#125;<br>            ],<br>            <span class="hljs-attr">showLabel</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;center&#x27;</span>,<br>            <span class="hljs-attr">top</span>: <span class="hljs-number">65</span>,<br>            <span class="hljs-attr">inRange</span>: &#123;<br>                <span class="hljs-attr">color</span>: [<span class="hljs-string">&#x27;rgb(220,233,200)&#x27;</span>, <span class="hljs-string">&#x27;rgb(123,201,111)&#x27;</span>, <span class="hljs-string">&#x27;rgb(25,98,35)&#x27;</span>]<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">calendar</span>: &#123;<br>            <span class="hljs-comment">//获取今年年份</span><br>            <span class="hljs-attr">range</span>: thisYear,<br>            <span class="hljs-attr">top</span>: <span class="hljs-number">120</span>,<br>            <span class="hljs-attr">left</span>: <span class="hljs-number">30</span>,<br>            <span class="hljs-attr">right</span>: <span class="hljs-number">30</span>,<br>            <span class="hljs-attr">cellSize</span>: [<span class="hljs-string">&#x27;auto&#x27;</span>, <span class="hljs-number">15</span>], <span class="hljs-comment">//width:auto,height:15</span><br>            <span class="hljs-attr">itemStyle</span>: &#123;<br>                <span class="hljs-attr">borderWidth</span>: <span class="hljs-number">2</span>,<br>                <span class="hljs-attr">borderColor</span>: <span class="hljs-string">&#x27;#d0d0d0&#x27;</span>,<br>                <span class="hljs-attr">borderType</span>: <span class="hljs-string">&#x27;solid&#x27;</span>,<br>                <span class="hljs-attr">shadowColor</span>: <span class="hljs-string">&#x27;rgba(0, 0, 0, 0.5)&#x27;</span>,<br>                <span class="hljs-attr">shadowBlur</span>: <span class="hljs-number">1</span><br>            &#125;,<br><br>            <span class="hljs-attr">yearLabel</span>: &#123;<br>                <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">margin</span>: <span class="hljs-number">11</span>,<br>                <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;bottom&#x27;</span><br>            &#125;,<br>            <span class="hljs-attr">splitLine</span>: &#123;<br>                <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-comment">//分割线样式</span><br>                <span class="hljs-attr">lineStyle</span>: &#123;<br>                    <span class="hljs-attr">width</span>: <span class="hljs-number">3</span>,<br>                    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#264653&#x27;</span><br>                &#125;<br>            &#125;,<br>            <span class="hljs-comment">//使用自定义纵坐标标签</span><br>            <span class="hljs-attr">dayLabel</span>: &#123;<br>                <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;start&#x27;</span>,<br>                <span class="hljs-attr">margin</span>: <span class="hljs-number">8</span>,<br>                <span class="hljs-attr">firstDay</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-comment">//nameMap: &#x27;ZH&#x27;,</span><br>                <span class="hljs-attr">nameMap</span>: [<span class="hljs-string">&#x27;Sun&#x27;</span>, <span class="hljs-string">&#x27;Mon&#x27;</span>, <span class="hljs-string">&#x27;Tue&#x27;</span>, <span class="hljs-string">&#x27;Wed&#x27;</span>, <span class="hljs-string">&#x27;Thur&#x27;</span>, <span class="hljs-string">&#x27;Fir&#x27;</span>, <span class="hljs-string">&#x27;Sat&#x27;</span>],<br>                <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#E9C46A&#x27;</span>,<br>                <span class="hljs-attr">fontStyle</span>: <span class="hljs-string">&#x27;normal&#x27;</span>,<br>                <span class="hljs-attr">fontWeight</span>: <span class="hljs-string">&#x27;bold&#x27;</span>,<br>                <span class="hljs-attr">fontFamily</span>: <span class="hljs-string">&#x27;Arial&#x27;</span>,<br>                <span class="hljs-attr">align</span>: <span class="hljs-string">&#x27;left&#x27;</span><br>            &#125;,<br>            <span class="hljs-attr">monthLabel</span>: &#123;<br>                <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">margin</span>: <span class="hljs-number">12</span>,<br>                <span class="hljs-attr">nameMap</span>: <span class="hljs-string">&#x27;EN&#x27;</span>,<br>                <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#fff&quot;</span><br><br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">series</span>: &#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;heatmap&#x27;</span>,<br>            <span class="hljs-attr">coordinateSystem</span>: <span class="hljs-string">&#x27;calendar&#x27;</span>,<br>            <span class="hljs-comment">//series的data只接受数组数据，不接受键值对</span><br>            <span class="hljs-attr">data</span>: getVirtualData(thisYear)<br>        &#125;<br>    &#125;;<br><br>&#123;% endecharts %&#125;<br></code></pre></div></td></tr></table></figure><p><strong>不足</strong></p><ol><li>是一种间接的途径获取的数据集合，因为通过EJS注入元素后我将这些直接渲染的数据设置了隐藏，然后再通过<code>document.getElementsByClassName()</code>来存储</li></ol><p>但这是一种取巧的办法，因为对于fluid主题的开发我并不完全明白其完整的工作机制，只通过一些时间摸索出以下结论</p><ul><li>EJS是为了更快捷方便的在模板中生成HTML代码，可以通过简单的标签来引用变量</li><li>HEXO博客中的一些变量只能通过EJS语句来调用和访问，不能通过<code>JavaScript</code>代码来获取</li></ul><ol><li>生成的echarts图并不能即时适配屏幕大小，不够毕竟热点图在电脑这样的设备下选择横向展示，移动设备上可以采取纵向显示（待完善）</li></ol><p><strong>改进优化</strong></p><p>1️⃣使用<code>iframe</code>嵌入写好的图表页面，但需要调整好页面的大小，适应主题模板的样式</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/html/....&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;600&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;topFrame&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;yes&quot;</span> <span class="hljs-attr">noresize</span>=<span class="hljs-string">&quot;noresize&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;topFrame&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>缺陷</li></ul><ol><li><p>不能借助ejs引用全局变量，在html中不能这样，因为自定义的html都设置了跳过渲染，也就不会启用EJS语法</p></li><li><p>因此这种方法只能用于引入一些静态页面，不能访问网站内部的变量</p></li></ol><p>2️⃣绘制的图表并不具备自适应界面的大小而随之变化，需要添加如下代码</p><h4 id="网站数据统计制图"><a href="#网站数据统计制图" class="headerlink" title="网站数据统计制图"></a>网站数据统计制图</h4><h5 id="1️⃣方案"><a href="#1️⃣方案" class="headerlink" title="1️⃣方案"></a>1️⃣方案</h5><ul><li>使用旭日图，这种相当于饼状图和柱状图的结合，能够更加形象的体现父类与子类的层级关系，以及各父类之间的统计量上的差别</li><li>使用饼状图，将各分类文章数、文章数量、各标签对应的文章数、文章的访问量、网站访问量都统计下来【南丁格尔图，比较形象】</li></ul><h5 id="2️⃣思路"><a href="#2️⃣思路" class="headerlink" title="2️⃣思路"></a>2️⃣思路</h5><ul><li>需要单独建立一个页面，专门设置为统计数据的展示</li><li>如何打通这个流程，一个新的页面渲染，要获取到后台的数据，并且是注册在导航栏中的页面</li></ul><h5 id="3️⃣具体操作"><a href="#3️⃣具体操作" class="headerlink" title="3️⃣具体操作"></a>3️⃣具体操作</h5><ol><li>需要注册一个<code>analyzer</code>模板，建立文件有<code>analyzer.ejs</code>，在全局变量<code>_pages/variables</code>中添加对应要设置的一些样式信息（可忽略），然后在<code>config.fluid.yml</code>中增加一栏专门设置这些信息，也可以不这样做，直接沿用博客中其他相似的模板配置</li><li><del>在<code>generator/pages.js</code>中添加渲染生成<code>analyzer</code>页面的代码</del></li><li>在<code>analyzer.ejs</code>引入博客全局变量<code>site.categories、site.tags</code>等快速渲染至模板中，然后在<code>analyzer/index.md</code>中仿造我的关于页面那样，进行<code>echarts</code>的制图</li></ol><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a><strong>问题</strong></h5><ol><li><p>经过研究，在<code>generator/pages.js</code>中添加生成指定页面的代码能够正常实现其功能的前提是：</p><p>​  该页面是不需要渲染Markdown文件内容的页面，由于我需要创建的数据统计页面和<code>about</code>本质上是一种，需要通过创建自定义页面的方法来渲染</p><p>​  因此在这一步我走了弯路，没有弄清机制，导致思考方向错误。</p></li><li><p>自定义页面的生成很简单，只需要执行以下代码</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo new page analyzer<br>//会生成/<span class="hljs-built_in">source</span>/analyzer/index.md文件<br>//编写index.md的内容即可<br>hexo clean&amp;&amp;hexo g&amp;&amp;hexo s<br>//重新渲染启动,就可以看到analyzer的出现，当然不要忘了在config.fluid,yml中<br></code></pre></div></td></tr></table></figure><ol><li>使用指定页面生成与否的方式如下写法，需要加载数据和布局，并指定生成index.html</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ejs">//------------custom by sherlock--------<br>// generate about page<br>hexo.extend.generator.register(&#x27;about&#x27;, function(locals) &#123;<br>  if (this.theme.config.about.enable !== false) &#123;<br>    return &#123;<br>      path  : &#x27;about/index.html&#x27;,<br>      data  : locals.theme,//读取配置文件的数据<br>      layout: &#x27;about&#x27;<br>    &#125;;<br>  &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><ul><li>我本想通过上述代码尝试能否控制<code>about</code>页面的显示，但通过测试，这串代码丝毫不起作用，不过方法还是有的，要想取消<code>about</code>的显示，在主题配置文件中修改导航栏菜单的配置选项、去掉<code>about</code>的字段，让我们无法通过导航栏打开（但这丝毫不影响我们通过URL直接访问）</li></ul><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>  <span class="hljs-comment">#去掉此处</span><br>  <span class="hljs-comment"># - &#123; key: &quot;about&quot;, link: &quot;/about/&quot;, icon: &quot;iconfont icon-user-fill&quot; &#125;</span><br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;labs&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/labs/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-exp-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;analyzer&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/analyzer/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-code&quot;</span> &#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="默认配置信息"><a href="#默认配置信息" class="headerlink" title="默认配置信息"></a>默认配置信息</h3><ul><li>CSS样式</li></ul><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">(<span class="hljs-attribute">color</span><span class="hljs-selector-class">.link_hover_color</span>&quot;, &quot;<span class="hljs-selector-id">#30a9de</span>&quot;)<br>$link-hover-<span class="hljs-attribute">color</span>-dark = theme-config(&quot;<span class="hljs-attribute">color</span><span class="hljs-selector-class">.link_hover_color_dark</span>&quot;, &quot;<span class="hljs-selector-id">#30a9de</span>&quot;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术拓展</category>
      
      <category>博客部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>创新优化</tag>
      
      <tag>Web-Dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>anki个性化开发</title>
    <link href="/anki01/"/>
    <url>/anki01/</url>
    
    <content type="html"><![CDATA[<h2 id="Anki玩法"><a href="#Anki玩法" class="headerlink" title="Anki玩法"></a>Anki玩法</h2><h5 id="自定义卡片"><a href="#自定义卡片" class="headerlink" title="自定义卡片"></a>自定义卡片</h5><ul><li><p>如官方介绍，说明是使用HTML页面的方式生成的模板，只需要将正确的字段填入即可自定义卡片</p></li><li><p>经过测试，使用WPS将摘录的卡片数据先转换为excel文档然后分隔好数据字段，再转换为txt文档（UTF-8编码）就能导入到anki中</p></li></ul><h5 id="导入词典数据"><a href="#导入词典数据" class="headerlink" title="导入词典数据"></a>导入词典数据</h5><ul><li><p>尝试导入MOJI辞书，格式不太好，并且不易处理，单词的内容也很一般，建议一个一个添加单词</p></li><li><p>加入在线音频成功</p></li></ul><h5 id="可导入的数据类型"><a href="#可导入的数据类型" class="headerlink" title="可导入的数据类型"></a>可导入的数据类型</h5><ul><li>图片怎么导入，能否用在线图片链接导入？</li></ul><h5 id="自定义软件界面-美化"><a href="#自定义软件界面-美化" class="headerlink" title="自定义软件界面/美化"></a>自定义软件界面/美化</h5><ul><li>浪费时间了有点，版本不支持比较全的配置插件</li><li>设置背景图就好</li></ul><h5 id="使用Markdown语法"><a href="#使用Markdown语法" class="headerlink" title="使用Markdown语法"></a>使用Markdown语法</h5><ul><li>利用js脚本将<code>markdown</code>语法生成HTML页面</li><li>修改引用本地样式表，沿用自<code>Typora-mo-dark</code>主题的CSS样式文件</li><li>将冗余的js代码封装在<code>render_md.js</code>中，在卡片样式的代码编写上减少了工作</li></ul><p>以问答形式的卡片模板为例子，简单可自定义</p><p><strong>卡片正面</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;md_sty.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;front&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>&#123;&#123;Front&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;render_md.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    renderMath(<span class="hljs-string">&quot;front&quot;</span>);</span><br><span class="javascript">    markdown(<span class="hljs-string">&quot;front&quot;</span>);</span><br><span class="javascript">    show();</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;front&quot;</span>).style.visibility = <span class="hljs-string">&quot;visible&quot;</span>;</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>卡片反面</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;md_sty.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;front&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>&#123;&#123;Front&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">id</span>=<span class="hljs-string">answer</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;back&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>&#123;&#123;Back&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;render_md.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    renderMath(<span class="hljs-string">&quot;front&quot;</span>);</span><br><span class="javascript">    markdown(<span class="hljs-string">&quot;front&quot;</span>);</span><br><span class="javascript">    renderMath(<span class="hljs-string">&quot;back&quot;</span>);</span><br><span class="javascript">    markdown(<span class="hljs-string">&quot;back&quot;</span>);</span><br><span class="javascript">    show();</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;front&quot;</span>).style.visibility = <span class="hljs-string">&quot;visible&quot;</span>;</span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;back&quot;</span>).style.visibility = <span class="hljs-string">&quot;visible&quot;</span>;</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h5 id="插件自改-源于其他开发者的插件"><a href="#插件自改-源于其他开发者的插件" class="headerlink" title="插件自改-源于其他开发者的插件"></a>插件自改-源于其他开发者的插件</h5><h6 id="1️⃣init-py"><a href="#1️⃣init-py" class="headerlink" title="1️⃣init.py"></a>1️⃣<strong><strong>init</strong>.py</strong></h6><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> aqt <span class="hljs-keyword">import</span> mw<br><span class="hljs-keyword">from</span> aqt.utils <span class="hljs-keyword">import</span> showInfo<br><span class="hljs-keyword">from</span> anki.hooks <span class="hljs-keyword">import</span> addHook<br><span class="hljs-keyword">import</span> anki<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">from</span> .getStatics <span class="hljs-keyword">import</span> HTMLforEditor, front, back, front_cloze, back_cloze, css<br><br>MODEL_NAME = <span class="hljs-string">&#x27;MD_SUP&#x27;</span><br>CONF_NAME = <span class="hljs-string">&#x27;MDKATEX&#x27;</span><br><br><span class="hljs-comment">#该方法是为了修改对于anki卡片笔记的预览界面（也就是添加笔记时候看到的页面）</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">markdownPreview</span>(<span class="hljs-params">editor</span>):</span><br>    <span class="hljs-comment">#这里规定了笔记模板只在MD_SUP Basci 或 MD_SUP Cloze下启用插件功能，可以改进</span><br>    <span class="hljs-keyword">if</span> editor.note.model()[<span class="hljs-string">&quot;name&quot;</span>] <span class="hljs-keyword">in</span> [MODEL_NAME + <span class="hljs-string">&quot; Basic&quot;</span>, MODEL_NAME + <span class="hljs-string">&quot; Cloze&quot;</span>]:<br>        editor.web.<span class="hljs-built_in">eval</span>(HTMLforEditor)<br>        <span class="hljs-comment">#editor.web.eval可以通过传入的JavaScript脚本字符串进行相应的操作</span><br>        editor.web.<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            var style = document.createElement(&#x27;style&#x27;);</span><br><span class="hljs-string">            style.type = &#x27;text/css&#x27;;</span><br><span class="hljs-string">            style.innerText = `</span><br><span class="hljs-string">                table, th, td &#123;</span><br><span class="hljs-string">                    border: 1px solid black;</span><br><span class="hljs-string">                    border-collapse: collapse;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">                pre code &#123;</span><br><span class="hljs-string">                    background-color: #eee;</span><br><span class="hljs-string">                    border: 1px solid #999;</span><br><span class="hljs-string">                    display: block;</span><br><span class="hljs-string">                    padding: 20px;</span><br><span class="hljs-string">                    overflow: auto;</span><br><span class="hljs-string">                &#125;`;</span><br><span class="hljs-string">            document.head.appendChild(style);</span><br><span class="hljs-string">        &quot;&quot;&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        editor.web.<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">          var area = document.getElementById(&#x27;markdown-area&#x27;);</span><br><span class="hljs-string">          if(area) area.remove();</span><br><span class="hljs-string">        &quot;&quot;&quot;</span>)<br><br><span class="hljs-comment">#加载笔记的时候调用该方法，会进行渲染</span><br>addHook(<span class="hljs-string">&quot;loadNote&quot;</span>, markdownPreview)<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_model_if_necessacy</span>():</span><br>    model = mw.col.models.byName(MODEL_NAME + <span class="hljs-string">&quot; Basic&quot;</span>)<br>    model_cloze = mw.col.models.byName(MODEL_NAME + <span class="hljs-string">&quot; Cloze&quot;</span>)<br>    m = mw.col.models<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> model:<br>        create_model()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> model_cloze:<br>        create_model_cloze()<br><br>    update()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_model</span>():</span><br>    m = mw.col.models<br>    model = m.new(MODEL_NAME + <span class="hljs-string">&quot; Basic&quot;</span>)<br><br>    field = m.newField(<span class="hljs-string">&quot;Front&quot;</span>)<br>    m.addField(model, field)<br><br>    field = m.newField(<span class="hljs-string">&quot;Back&quot;</span>)<br>    m.addField(model, field)<br><br>    template = m.newTemplate(MODEL_NAME + <span class="hljs-string">&quot; Basic&quot;</span>)<br>    template[<span class="hljs-string">&#x27;qfmt&#x27;</span>] = front<br>    template[<span class="hljs-string">&#x27;afmt&#x27;</span>] = back<br>    model[<span class="hljs-string">&#x27;css&#x27;</span>] = css<br><br>    m.addTemplate(model, template)<br>    m.add(model)<br>    m.save(model)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_model_cloze</span>():</span><br>    m = mw.col.models<br>    model = m.new(MODEL_NAME + <span class="hljs-string">&quot; Cloze&quot;</span>)<br>    model[<span class="hljs-string">&quot;type&quot;</span>] = anki.consts.MODEL_CLOZE<br><br>    field = m.newField(<span class="hljs-string">&quot;Text&quot;</span>)<br>    m.addField(model, field)<br><br>    field = m.newField(<span class="hljs-string">&quot;Back Extra&quot;</span>)<br>    m.addField(model, field)<br><br>    template = m.newTemplate(MODEL_NAME + <span class="hljs-string">&quot; Cloze&quot;</span>)<br>    template[<span class="hljs-string">&#x27;qfmt&#x27;</span>] = front_cloze<br>    template[<span class="hljs-string">&#x27;afmt&#x27;</span>] = back_cloze<br>    model[<span class="hljs-string">&#x27;css&#x27;</span>] = css<br><br>    m.addTemplate(model, template)<br>    m.add(model)<br>    m.save(model)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span>():</span><br>    model = mw.col.models.byName(MODEL_NAME + <span class="hljs-string">&quot; Basic&quot;</span>)<br>    model_cloze = mw.col.models.byName(MODEL_NAME + <span class="hljs-string">&quot; Cloze&quot;</span>)<br><br>    model[<span class="hljs-string">&#x27;tmpls&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;qfmt&#x27;</span>] = front<br>    model[<span class="hljs-string">&#x27;tmpls&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;afmt&#x27;</span>] = back<br>    model[<span class="hljs-string">&#x27;css&#x27;</span>] = css<br><br>    model_cloze[<span class="hljs-string">&#x27;tmpls&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;qfmt&#x27;</span>] = front_cloze<br>    model_cloze[<span class="hljs-string">&#x27;tmpls&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;afmt&#x27;</span>] = back_cloze<br>    model_cloze[<span class="hljs-string">&#x27;css&#x27;</span>] = css<br><br>    mw.col.models.save(model)<br>    mw.col.models.save(model_cloze)<br><br>    <span class="hljs-keyword">if</span> os.path.isdir(os.path.join(mw.col.media.<span class="hljs-built_in">dir</span>(), <span class="hljs-string">&quot;_katex&quot;</span>)):<br>        shutil.rmtree(os.path.join(mw.col.media.<span class="hljs-built_in">dir</span>(), <span class="hljs-string">&quot;_katex&quot;</span>))<br><br>    <span class="hljs-keyword">if</span> os.path.isdir(os.path.join(mw.col.media.<span class="hljs-built_in">dir</span>(), <span class="hljs-string">&quot;_markdown-it&quot;</span>)):<br>        shutil.rmtree(os.path.join(mw.col.media.<span class="hljs-built_in">dir</span>(), <span class="hljs-string">&quot;_markdown-it&quot;</span>))<br><br>    addon_path = os.path.join(os.path.dirname(os.path.realpath(__file__)))<br><br>    _add_file(os.path.join(addon_path, <span class="hljs-string">&quot;_katex.min.js&quot;</span>), <span class="hljs-string">&quot;_katex.min.js&quot;</span>)<br>    _add_file(os.path.join(addon_path, <span class="hljs-string">&quot;_katex.css&quot;</span>), <span class="hljs-string">&quot;_katex.css&quot;</span>)<br>    _add_file(os.path.join(addon_path, <span class="hljs-string">&quot;_auto-render.js&quot;</span>), <span class="hljs-string">&quot;_auto-render.js&quot;</span>)<br>    _add_file(os.path.join(addon_path, <span class="hljs-string">&quot;_markdown-it.min.js&quot;</span>),<br>              <span class="hljs-string">&quot;_markdown-it.min.js&quot;</span>)<br>    _add_file(os.path.join(addon_path, <span class="hljs-string">&quot;_highlight.css&quot;</span>), <span class="hljs-string">&quot;_highlight.css&quot;</span>)<br>    _add_file(os.path.join(addon_path, <span class="hljs-string">&quot;_highlight.js&quot;</span>), <span class="hljs-string">&quot;_highlight.js&quot;</span>)<br>    _add_file(os.path.join(addon_path, <span class="hljs-string">&quot;_mhchem.js&quot;</span>), <span class="hljs-string">&quot;_mhchem.js&quot;</span>)<br>    _add_file(os.path.join(addon_path, <span class="hljs-string">&quot;_markdown-it-mark.js&quot;</span>), <span class="hljs-string">&quot;_markdown-it-mark.js&quot;</span>)<br><br>    <span class="hljs-keyword">for</span> katex_font <span class="hljs-keyword">in</span> os.listdir(os.path.join(addon_path, <span class="hljs-string">&quot;fonts&quot;</span>)):<br>        _add_file(os.path.join(addon_path, <span class="hljs-string">&quot;fonts&quot;</span>, katex_font), katex_font)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_add_file</span>(<span class="hljs-params">path, filename</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isfile(os.path.join(mw.col.media.<span class="hljs-built_in">dir</span>(), filename)):<br>        mw.col.media.add_file(path)<br><br><br>addHook(<span class="hljs-string">&quot;profileLoaded&quot;</span>, create_model_if_necessacy)<br><br></code></pre></div></td></tr></table></figure><blockquote><p>由此思考，可以改进的地方：</p><ul><li>将功能的启用由原本只限于两种模板拓展至多个想要使用的模板——包含<code>MD_</code>即可触发</li><li></li></ul></blockquote><h6 id="2️⃣-getStatics-py"><a href="#2️⃣-getStatics-py" class="headerlink" title="2️⃣ getStatics.py"></a>2️⃣ <strong>getStatics.py</strong></h6><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#该变量是用于渲染笔记编辑器的预览样式，由于与其他变量有一些不同，暂时不做修改</span><br>HTMLforEditor = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        var area = document.getElementById(&#x27;markdown-area&#x27;);</span><br><span class="hljs-string">        if(area) area.remove();</span><br><span class="hljs-string">        area = document.createElement(&#x27;markdown-area&#x27;);</span><br><span class="hljs-string">        area.id = &#x27;markdown-area&#x27;;</span><br><span class="hljs-string">        area.style.display = &#x27;inline-block&#x27;;</span><br><span class="hljs-string">        area.style.overflowY = &#x27;auto&#x27;;</span><br><span class="hljs-string">        area.style.padding = &#x27;1%&#x27;;</span><br><span class="hljs-string">        area.style.visibility = &#x27;hidden&#x27;;</span><br><span class="hljs-string">        area.style.width = &#x27;98%&#x27;;</span><br><span class="hljs-string">        area.style.height = &#x27;100%&#x27;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        var fields = document.getElementById(&#x27;fields&#x27;).children;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        keyupFunc = function() &#123;</span><br><span class="hljs-string">            var text = &#x27;# Field 1\\n&#x27; + fields[0].children[1].shadowRoot.children[2].innerHTML;</span><br><span class="hljs-string">            text += &quot;\\n# Field 2\\n&quot; + fields[1].children[1].shadowRoot.children[2].innerHTML;</span><br><span class="hljs-string">            render(text);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        document.body.appendChild(area);</span><br><span class="hljs-string">        function replaceHTMLElementsInString(str) &#123;</span><br><span class="hljs-string">          str = str.replace(/&amp;nbsp;/gi, &quot; &quot;);</span><br><span class="hljs-string">          str = str.replace(/&amp;tab;/gi, &quot;  &quot;);</span><br><span class="hljs-string">          str = str.replace(/&amp;gt;/gi, &quot;&gt;&quot;);</span><br><span class="hljs-string">          str = str.replace(/&amp;lt;/gi, &quot;&lt;&quot;);</span><br><span class="hljs-string">          return str.replace(/&amp;amp;/gi, &quot;&amp;&quot;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>...<br>...<br><br></code></pre></div></td></tr></table></figure><blockquote><p>观察可知，该文件只是为了存储JavaScript的代码字段至几个需要被调用的变量中，并且存在很多重复的代码<br>改进：</p><ul><li>删除冗余的代码，并且将代码存储在js文件中，同样可以由ajax获取得到并存储至collection-media文件内（即媒体文件）</li><li>引用外部文件添加自己的脚本，我的脚本先上传至自己的文件仓库，并通过<a href="[Migrate from GitHub to jsDelivr](https://www.jsdelivr.com/github">GitHub文件转jsDelivr</a>)该网址形成的链接来访问下载；或者直接存放脚本文件到插件项目文件夹下</li><li>由原本的两个字段渲染改进为多个可编辑字段的渲染</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术拓展</category>
      
      <category>Anki</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>创新优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复试C++</title>
    <link href="/coding02/"/>
    <url>/coding02/</url>
    
    <content type="html"><![CDATA[<h2 id="C-复试"><a href="#C-复试" class="headerlink" title="C++ 复试"></a>C++ 复试</h2><ul><li>关于类的使用和方法定义</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pointOut</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> k, t, f;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Test::pointOut</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    k = a;<br>    t = a * <span class="hljs-number">10</span>;<br>    f = a / <span class="hljs-number">2</span>;<br>    cout &lt;&lt; k &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; t &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; f;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Test myTest;<br>    myTest.<span class="hljs-built_in">pointOut</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="条件编译指令"><a href="#条件编译指令" class="headerlink" title="条件编译指令"></a>条件编译指令</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/*-------------------1-----------------------*/</span><br><span class="hljs-comment">//区分if-else语句</span><br><span class="hljs-comment">//条件编译的作用正式&quot;选择性对代码编译&quot;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 常量表达式1</span><br>    程序段<span class="hljs-number">1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">elif</span> 常量表达式2</span><br>      程序段<span class="hljs-number">2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>        程序段<span class="hljs-number">3</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/*-------------------2-----------------------*/</span><br><span class="hljs-comment">//ifdef语句</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> 标识符</span><br>       程序段<span class="hljs-number">1</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>     程序段<span class="hljs-number">2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-comment">/*-------------------3-----------------------*/</span><br><span class="hljs-comment">//ifndef语句</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> 标识符</span><br>       程序段<span class="hljs-number">1</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>     程序段<span class="hljs-number">2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">//类型3常用来避免在头文件中重复引入</span><br>比如：文件<span class="hljs-number">1</span>和文件<span class="hljs-number">2</span>同时引入head.h<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;head.h&quot;</span></span><br>则需要在head.h写<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> HEAD_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HEAD_H</span><br>     ····<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure><h4 id="数组、指针、字符串"><a href="#数组、指针、字符串" class="headerlink" title="数组、指针、字符串"></a>数组、指针、字符串</h4><h5 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h5><ul><li>易混淆的点，指针指向常量与常量指针</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> a = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *q = &amp;a;<span class="hljs-comment">//定义一个指向整形常量 a 的指针</span><br>*q = <span class="hljs-number">10</span>;<span class="hljs-comment">//不能对该指针所指向的内容进行修改，只可以访问 read-only</span><br><span class="hljs-comment">/*-----------*/</span><br><span class="hljs-keyword">int</span> a = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> *<span class="hljs-keyword">const</span> q = &amp;a;<span class="hljs-comment">//声明一个常量指针,不可修改其内容（即不能更换它指向的变量）</span><br>q = &amp;b;<span class="hljs-comment">//报错</span><br><br></code></pre></div></td></tr></table></figure><ul><li>指向数组的指针</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> a[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">int</span> *p=a;<br><span class="hljs-keyword">int</span> *q=&amp;a[<span class="hljs-number">0</span>];<span class="hljs-comment">//两句等价,都是指向数组首地址</span><br><br><span class="hljs-comment">//通过指针访问数组</span><br>cout&lt;&lt;*p;<span class="hljs-comment">//即 a[0]</span><br>cout&lt;&lt; *(p+i)<span class="hljs-comment">//即 a[i]</span><br>*(p+i)=*(a+i)=a[i]<br></code></pre></div></td></tr></table></figure><h4 id="使用VSCODE-CMake-编译C-项目"><a href="#使用VSCODE-CMake-编译C-项目" class="headerlink" title="使用VSCODE+CMake 编译C++项目"></a>使用VSCODE+CMake 编译C++项目</h4><ul><li>有点复杂，但应该是我没有理清楚思路<ul><li>用C++实现优先级队列</li></ul></li><li>但一次实践复习了不少知识<ul><li>C++面向对象编程</li><li>c++工程开发的步骤</li><li>大根堆小根堆的实现-优先级队列</li></ul></li></ul><h6 id="1️⃣-动态数组"><a href="#1️⃣-动态数组" class="headerlink" title="1️⃣ 动态数组"></a>1️⃣ 动态数组</h6><ul><li>数组空间的首地址十分重要，不论是作为参数还是直接指向整个数组，首地址就相当于一个指向标，我们可以通过指针访问</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> *p;<span class="hljs-comment">//声明一个整型数组，为其创建首地址的空间</span><br>p = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>) * (<span class="hljs-number">10</span>)); <span class="hljs-comment">//声明了动态数组的空间大小为10个整型数据的空间</span><br><span class="hljs-built_in">memset</span>(p, <span class="hljs-number">0</span>, <span class="hljs-number">10</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<span class="hljs-comment">//初始化数组内所有元素为0</span><br></code></pre></div></td></tr></table></figure><h6 id="2️⃣-实现优先级队列"><a href="#2️⃣-实现优先级队列" class="headerlink" title="2️⃣ 实现优先级队列"></a>2️⃣ 实现优先级队列</h6><ul><li>需要将优先级队列封装成一个类，然后通过主程序生成对象来调用其内部的方法，也就是面向对象编程，先编写头文件</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/*-----------------------myqueue.h----------------*/</span><br><span class="hljs-comment">//头文件声明myqueue类，这样可以被main.cpp调用，通过myqueue.cpp实现该类的具体方法，分工明确，而且独立性强</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> MYQUEUE__H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MYQUEUE__H</span><br><br><span class="hljs-comment">//定义一个优先级队列，局限于比较整形数据</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">priQueue</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//放置方法,参数为 容量大小和堆的类型</span><br>    <span class="hljs-built_in">priQueue</span>(<span class="hljs-keyword">bool</span> compFunc);<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//获取首元素，最大/小</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> e)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">//cap为默认容量，comp表示建堆方式，curSize为当前已入队元素数量</span><br>    <span class="hljs-keyword">int</span> cap = <span class="hljs-number">100</span>, comp, curSize = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> *pq;          <span class="hljs-comment">//初始队列</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">(<span class="hljs-keyword">int</span> e)</span></span>; <span class="hljs-comment">//上浮</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sink</span><span class="hljs-params">(<span class="hljs-keyword">int</span> e)</span></span>; <span class="hljs-comment">//下沉</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exchange</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;<span class="hljs-comment">//交换两数</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">less</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;    <span class="hljs-comment">//用于小根堆</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">greater</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>; <span class="hljs-comment">//用于大根堆</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">parent</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span>;<span class="hljs-comment">//获得父节点的索引</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lchild</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span>;<span class="hljs-comment">//获取左孩子索引</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rchild</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span>;<span class="hljs-comment">//获取右孩子索引</span><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure><ul><li>类方法的具体实现</li></ul><p>实现优先级队列实际就是数据结构里的大根堆小根堆的思想，常见的大小根堆都是完全二叉树，又叫二叉堆。实现二叉堆的思想并不复杂，以实现大根堆为例子，主要步骤如下：</p><ol><li>二叉堆其实就是一种特殊的二叉树（完全二叉树），只不过存储在数组里。一般的链表二叉树，我们操作节点的指针，而在数组里，我们把数组索引作为指针</li><li>将数组中第一使用的元素<code>arr[1]</code>作为二叉树的根的话，根据完全二叉树的性质，每个节点的父节点及其左右孩子的索引都可以通过简单的运算得到，而<strong>大/小根堆</strong>的性质特殊在于：（此处我们只讨论整型数据，其他数据类型类似思想）每个节点的数值都<strong>大于等于/小于等于</strong>其子节点的数值；那么<code>arr[1]</code>就是最值元素了</li></ol><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//获取右孩子索引</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rchild</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> root * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//获取左孩子索引</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lchild</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> root * <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">//获取父节点索引</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">parent</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> root / <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol><li>由于上述的计算涉及乘除法，显然我们不能使用<code>arr[0]</code>作为首元素；实现二叉堆主要涉及操作如下面代码定义</li></ol><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><br><span class="hljs-comment">/*------------------myqueue.cpp-------------------------*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;myqueue.h&quot;</span></span><br><br><span class="hljs-comment">//实现priQueue的构造函数</span><br>priQueue::<span class="hljs-built_in">priQueue</span>(<span class="hljs-keyword">bool</span> compFunc)<br>&#123;<br><br>    pq = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>) * (cap + <span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">memset</span>(pq, <span class="hljs-number">0</span>, (cap + <span class="hljs-number">1</span>) * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-keyword">if</span> (compFunc == <span class="hljs-literal">true</span>)<br>    &#123;<br>        comp = <span class="hljs-number">1</span>; <span class="hljs-comment">//建立大根堆,否则为小根堆</span><br>    &#125;<br>    comp = compFunc; <span class="hljs-comment">//设置好建堆方式</span><br>&#125;;<br><br><span class="hljs-comment">//获取首元素</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">priQueue::top</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> pq[<span class="hljs-number">1</span>];<br>&#125;;<br><br><span class="hljs-comment">//返回堆大小</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">priQueue::size</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> curSize;<br>&#125;;<br><br><span class="hljs-comment">//判断是否为空队列</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">priQueue::isEmpty</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> curSize == <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">priQueue::insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>    curSize++; <span class="hljs-comment">//索引0无法参与寻找双亲与孩子节点的计算，必须从1开始</span><br>    <span class="hljs-comment">//插入到队尾</span><br>    pq[curSize] = e;<br>    <span class="hljs-comment">//上浮</span><br>    <span class="hljs-built_in">swim</span>(curSize);<br>&#125;;<br><br><span class="hljs-comment">//删除并返回当前队列中的最值</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">priQueue::pop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> max = pq[<span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">exchange</span>(<span class="hljs-number">1</span>, curSize);<br>    pq[curSize] = <span class="hljs-number">0</span>;<br>    curSize--;<br>    <span class="hljs-built_in">sink</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br>/<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">priQueue::greater</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> pq[x] &gt; pq[y];<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">priQueue::less</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> pq[x] &lt; pq[y];<br>&#125;;<br><span class="hljs-comment">//下沉,显然只能用到队首和队尾元素进行改变</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">priQueue::sink</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//大根堆</span><br>    <span class="hljs-keyword">if</span> (comp == <span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">lchild</span>(k) &lt;= curSize)<br>        &#123;<br>            <span class="hljs-comment">//假设左孩子更大</span><br>            <span class="hljs-keyword">int</span> temp = <span class="hljs-built_in">lchild</span>(k);<br>            <span class="hljs-comment">//看右孩子是否比左孩子更大</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">rchild</span>(k) &lt;= curSize &amp;&amp; <span class="hljs-built_in">less</span>(temp, <span class="hljs-built_in">rchild</span>(k)))<br>            &#123;<br>                temp = <span class="hljs-built_in">rchild</span>(k);<br>            &#125;<br>            <span class="hljs-comment">//如果左右都不够</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">less</span>(temp, k))<br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-built_in">exchange</span>(temp, k);<br>            k = temp;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">else</span><br>    &#123; <span class="hljs-comment">//小根堆</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">lchild</span>(k) &lt;= curSize)<br>        &#123;<br>            <span class="hljs-comment">//假设左孩子更小</span><br>            <span class="hljs-keyword">int</span> temp = <span class="hljs-built_in">lchild</span>(k);<br>            <span class="hljs-comment">//看右孩子是否比左孩子更小</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">rchild</span>(k) &lt;= curSize &amp;&amp; <span class="hljs-built_in">greater</span>(temp, <span class="hljs-built_in">rchild</span>(k)))<br>            &#123;<br>                temp = <span class="hljs-built_in">rchild</span>(k);<br>            &#125;<br>            <span class="hljs-comment">//如果左右都不够</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">greater</span>(temp, k))<br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-built_in">exchange</span>(temp, k);<br>            k = temp;<br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//上浮</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">priQueue::swim</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//大根堆,父节点比该节点小时上浮</span><br>    <span class="hljs-keyword">if</span> (comp == <span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">less</span>(<span class="hljs-built_in">parent</span>(k), k))<br>        &#123;<br>            <span class="hljs-built_in">exchange</span>(<span class="hljs-built_in">parent</span>(k), k);<br>            k = <span class="hljs-built_in">parent</span>(k); <span class="hljs-comment">//k上升为父节点</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//小根堆反之</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">greater</span>(<span class="hljs-built_in">parent</span>(k), k))<br>        &#123;<br>            <span class="hljs-built_in">exchange</span>(<span class="hljs-built_in">parent</span>(k), k);<br>            k = <span class="hljs-built_in">parent</span>(k); <span class="hljs-comment">//k上升为父节点</span><br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//交换两数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">priQueue::exchange</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> temp = pq[x];<br>    pq[x] = pq[y];<br>    pq[y] = temp;<br>&#125;;<br><br><span class="hljs-comment">//获取右孩子索引</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">priQueue::rchild</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> root * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//获取左孩子索引</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">priQueue::lchild</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> root * <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">//获取父节点索引</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">priQueue::parent</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> root / <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
      <category>C++算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卷积神经网络</title>
    <link href="/cnn01/"/>
    <url>/cnn01/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>申明</strong> ：以下内容总结摘录至B站Up主<code>王木头学科学</code> 的相关视频，本人出于学习目的，学习他的视频内容并选择性的总结和摘录以丰富自己的知识和对卷积神经网络的理解，也就是做笔记</p><p>视频链接：<a href="https://www.bilibili.com/video/BV1VV411478E">理解卷积、卷积操作、再到卷积神经网络</a>，本文章内的其他内容也可以在他的个人主页相关视频中找到</p></blockquote><h2 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><h3 id="什么是卷积？"><a href="#什么是卷积？" class="headerlink" title="什么是卷积？"></a>什么是卷积？</h3><h4 id="卷积公式"><a href="#卷积公式" class="headerlink" title="卷积公式"></a>卷积公式</h4><ul><li>公式如： <script type="math/tex; mode=display">\int_{-\infty}^{+\infty} f(\tau)g(x - \tau) d\tau</script></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Cuber-final/myblog_statics@master/posts/cnn01/conv_formula.4q71ccxhbuw0.webp" alt="卷积公式例子" title="卷积公式举例"></p><ul><li>结合视频中的例子，有如下解释<ul><li>函数 $f(\tau)$ 表示一个人的进食情况或者简单的说是在某一时刻（横坐标）人进食的量化即吃了多少东西（纵坐标）</li><li>$g(x - \tau)$ 则表示这个人的消化情况，反映经过多长时间后某一摄入的食物将消耗至原来的多少（比例)</li><li>这两个函数的乘积反映出一个模型：在某一个时刻 $\tau$ 摄入食物，在另一时刻 $x$ 时，该食物在人体内还留存多少，那么求积分则是计算在 $x$ 时刻时，人体内所有食物存量的总和（因为在此之前，可能摄入在不同的时间摄入了不同量的食物，在到达同一时刻它们的剩余量也不尽相同）</li><li>积分的上下限是非固定的，需要结合实际问题模型来确定，视频例子则是从0时刻开始到$+\infty $</li></ul></li><li>由此我们可以得到卷积公式的物理意义体现在：一个系统具有不稳定的输入 $f$ 以及可以得到稳定的输出 $g$ ，积分求出系统的存量</li></ul><h4 id="卷积在计算机的应用"><a href="#卷积在计算机的应用" class="headerlink" title="卷积在计算机的应用"></a>卷积在计算机的应用</h4><ul><li>对卷积公式应用的拓展延伸，卷积的意义更有深度，体现了在某一个时刻之前周围事物对该事物产生的影响的叠加</li></ul><h5 id="卷积神经网络-1"><a href="#卷积神经网络-1" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h5><ul><li>用于图像处理，探究周围像素点对某中心像素点产生的影响（不同像素点的影响贡献度可以不同，并且可以调解）</li><li>卷积核的不同，对特征提取有不同的效果（卷积核的设置是人为的，赋予了计算机利用神经网络进行学习更强的目的性和主动性）<ul><li>如下图中两种不同的卷积核能够提取保留出两个不同方向上的图片像素，效果明显；因此卷积核也有过滤器的说法</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Cuber-final/myblog_statics@master/posts/cnn01/filter_layer.4wpha7xdfpu0.webp" alt="过滤器" title="过滤器"></p><ul><li>经过卷积核的特征提取/过滤后，将这些保留的特征用于神经网络的输入以进行后续的训练<h3 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h3></li><li>一个线性函数与一个激活函数的组合或者说，是在神经网络中隐藏层的一个单元（上一层的输出，下一层的输入）</li><li>通过最简单的激活函数进行分类判断（二分类）；0-1 激活函数，只有两种选择，将实际问题仅仅局限在了“是或不是”的角度</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Cuber-final/myblog_statics@master/posts/cnn01/act_funct01.3p64olg3c6g0.webp" alt="感知机的简单例子" title="感知机"></p><ul><li>感知机不仅适用于<code>二维</code>的分类，还可以拓展至<code>N</code>维，都能找到如图中一样将所有的样本一分为二的<code>分界线</code>，如<code>三维空间</code>中将通过<code>二维平面</code>进行划分</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Cuber-final/myblog_statics@master/posts/cnn01/act_funct02.2mpj1x9c67w0.webp" alt="拓展至3维空间" title="拓展至3维空间"></p><ul><li>公式</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Cuber-final/myblog_statics@master/posts/cnn01/perceptron01.5v0m1wdwu0g0.webp" alt="运算图示" title="运算图示"></p><ul><li>测试Latex语法的支持效果，以及检测BUG，hexo的LaTeX效果不如Typora，<strong>多行公式</strong>需要用 <code>\begin&#123;aligned&#125; ... \end&#123;aligned&#125;</code>，换行符 <code>\\</code> 和定位符 <code>&amp;</code>。添加了这些代码内容后，渲染正常如下</li></ul><script type="math/tex; mode=display">\begin{aligned}&\text{t即为输出，b为偏置单元，w_i为权重，x_i为输入单元}\\& t=f(\sum_{i=1}^nw_ix_i+b)=f(\mathbf{w}^T\mathbf{x})\\& \sum_{i=1}^nw_ix_i+b \text{正是'分界线'}\\& \text{其数值大小无非以下，直接带入激活函数便能得到判断结果}\\& \sum_{i=1}^nw_ix_i+b\begin{cases}\geq 0 \\[2ex]<0\end{cases}\\& \mathbf{w}^T\mathbf{x} ，是上一公式的简化写法，在计算机中使用向量的计算（矩阵点积）\\\end{aligned}</script><p><img src="https://cdn.jsdelivr.net/gh/Cuber-final/myblog_statics@master/posts/cnn01/perceptron02.jgl5i2k5img.webp" alt="演算解析"></p><ul><li>尽管感知机是一个通用的’模板’，可以通过线性函数和激活函数的组合，看似能够将所有的二分问题解决，但存在一种很致命的缺陷，那就是仅靠简单的感知机将无法解决分类<code>边界模糊</code>或<code>分类边界不易确定</code>的问题，如下图这种，分界线是<code>曲线</code>，而不是线性的分类问题。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Cuber-final/myblog_statics@master/posts/cnn01/twoClass.26xvu0vj8i68.webp" alt="特殊的例子" title="非线性的分类问题"></p><ul><li><p>解决办法</p><ul><li><p>多个感知机的组合搭配，可为什么这样就能够解决？</p><ul><li>模板形式简单，组合也不会特别难</li></ul></li><li><p>低纬度升高纬度（待研究）</p></li></ul></li></ul><h3 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h3><h5 id="概述与特点的理解"><a href="#概述与特点的理解" class="headerlink" title="概述与特点的理解"></a>概述与特点的理解</h5><ul><li>感知机的组合搭配</li><li><p>激活函数 $sigmoid$，巧妙之处在于，问题不再是判断是非，而是判断达到目标的程度有多接近（概率）</p><ul><li>通俗点说，通过激活函数，每个输出判断一个用来测试的样本有多大的概率接近期望答案（比如，给一个图片，通过神经网络来判断有多大概率是猫，如果在此基础上附加一些概率的界限，比如当<code>是猫的概率</code>达到<code>90%</code>时，那就判定得出<code>是猫</code>的结论）</li></ul></li><li><p>输出可以变为多个目标类型，也就是可以通过训练分类出多个目标（没有绝对统一的标准，但通过不断学习接近标准）</p></li></ul><h5 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h5><ul><li><p>作用是定量的去衡量两个模型之间的差别，这需要计算出来</p></li><li><p>常见计算方法</p><ul><li><p>最小二乘法</p><ul><li>为何在反向传播中用梯度下降法时，最小二乘法会带来不便？</li></ul></li><li><p>极大似然估计法</p><ul><li>利用最大似然估计法的思想去寻找最接近<code>目标期望</code>的模型</li><li>为何要前加负号反求最小值？</li></ul></li><li><p>交叉熵 </p><ul><li>熵，系统的不确定性，熵值越大，不确定性越大；总系统的熵值则通过加权求和（求期望，每一部分对系统信息的贡献度不同，占比不同）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Cuber-final/myblog_statics@master/posts/cnn01/sysEntropy.199zm5g6ophc.webp" alt="系统熵值" title="系统熵值"></p><ul><li>散度 D~KL~ 的计算引出交叉熵的概念，下图计算的是以<code>系统P为基准的交叉熵</code>，由吉布斯不等式证明得出<code>系统P的交叉熵部分的数值恒大于P的系统熵值</code>，$H(P,Q)$ 便成了比较两个系统熵值的关键，其值越小意味着两个系统的差距越小</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Cuber-final/myblog_statics@master/posts/cnn01/cross_entropy.26s9saho95b4.webp" alt="交叉熵" title="交叉熵的推导过程"></p><ul><li>交叉熵运用至神经网络的推演</li></ul><blockquote><ul><li><p>$i$ 的数量取决于两系统的最大变量数</p></li><li><p>$p_i$ 表示要作为基准的模型数据，在识别猫图的例子中，就是每一张猫图的<code>是不是猫</code>即<code>0和1</code>数值标签，也是这个神经网络的输入</p></li><li><p>$q_i$ 表示要拿去和基准模型 比较的模型数据</p></li><li><p>计算机中的信息以二进制形式存储。，$log_2(x)$ 选择 以<code>2</code>为底数符合了计算机中的信息量单位<code>比特</code></p></li><li><p>将交叉熵与极大似然估计学习联系，可以看到很多相似的地方，但存在需要谨慎对待的不同点</p></li></ul></blockquote></li></ul></li></ul><p>   <img src="https://cdn.jsdelivr.net/gh/Cuber-final/myblog_statics@master/posts/cnn01/useCE.3uufxzumxye0.webp" alt="交叉熵应用" title="交叉熵应用"></p><blockquote><p><code>纠错</code>，上图中红框内的公式错误，经过检索交叉熵函数的定义以及视频评论区的大佬纠错，加深了理解，可以从以下角度理解<br>$x_i$ 表示输入的一个标签，在判断是不是猫的项目中，其取值只有两种即$x_1$ 代表是猫，$x_2$代表不是猫，应修改公式为</p><ul><li>由此我推测，对于识别多个分类的项目，是不是对应多个输入的标签来求交叉熵实现损失函数计算？</li></ul></blockquote><script type="math/tex; mode=display">  \begin{aligned}  & H(P,Q)\\  & =-\sum_{i=1}^n (x_i·\log_2y_i)\\  & =-(x_1·\log_2y_1+x_2·\log_2y_2)\\  & x_1=1 \quad x_2=0 \quad y_2=1-y_1  \end{aligned}</script><h5 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h5><hr><h4 id="探究神经网络的前向传播与后向传播-的原理与公式的推导"><a href="#探究神经网络的前向传播与后向传播-的原理与公式的推导" class="headerlink" title="探究神经网络的前向传播与后向传播 的原理与公式的推导"></a>探究神经网络的前向传播与后向传播 的原理与公式的推导</h4><h5 id="思考一，神经网络的由来，神经网络前向传播的公式为何是这样？"><a href="#思考一，神经网络的由来，神经网络前向传播的公式为何是这样？" class="headerlink" title="思考一，神经网络的由来，神经网络前向传播的公式为何是这样？"></a>思考一，神经网络的由来，神经网络前向传播的公式为何是这样？</h5><ul><li>神经网络的实现意义在于，我们能否基于给定的输入，通过某种确定的函数变换（模型）得到一个对应的输出，但有这么些特点<ul><li>模型不是一开始就确定的，而是通过大量的输入并与目标样本的比对来评估并且学习，最终找到合适的模型，这就是和我们人脑学习一样的过程，神经网络就是一个函数拟合器</li><li>为什么要用<strong>权重</strong>×<strong>输入</strong>的方式来计算？<ul><li>进行结果预测的时候，权重反映了某一信息对预测的贡献度（相关性），因此当存在多个输入的时候，由于每一个输入都具有自己的权重，要具备更准确的输出，就需要<strong>加权和</strong>，对于每一项输入，计算其局部的<strong>权重</strong>×<strong>输入</strong>，最后求总和</li><li>运用向量乘法实现</li></ul></li><li>前向传播的计算公式和过程？<ul><li>上一层计算得到的输出作为下一层的输入，重复这一过程直到求出最后一层的结果</li><li>梯度下降，将一个维度（方向）拆分为多个分量的向量和（每一个分量都是沿着其对应的梯度方向，数值变化最快），也就是求偏导，还涉及链式求导法则</li></ul></li><li>后向传播的计算思路与推导？<ul><li>根据输出求关于输入x的梯度，链式求导，列出函数嵌套</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
      <category>CNN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>CNN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部署博客和优化配置</title>
    <link href="/deployBlog/"/>
    <url>/deployBlog/</url>
    
    <content type="html"><![CDATA[<h2 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h2><h3 id="部署方式一-部署到GitHub-Pages"><a href="#部署方式一-部署到GitHub-Pages" class="headerlink" title="部署方式一 部署到GitHub Pages"></a>部署方式一 部署到GitHub Pages</h3><ul><li><p>搭建好开发环境相关的工作， 涉及如下（细节不赘述，网上可以检索到相关的搭建教程），仅供参考 <a href="https://blog.csdn.net/qq_35561857/article/details/81590953">hexo安装配置教程</a></p><ul><li>npm</li><li>Git ，Git Bash 以及 Git SSH 配置 </li><li>安装 Hexo</li></ul></li><li><p>注册好GitHub 账号，接着创建一个公开仓库（public）并且以 <code>username.github.io</code> 命名仓库 </p><ul><li>这样写的原因是，需要通过域名 <code>https://username.github.io</code> 来访问你的网站；如果仓库取了其他名字，最后访问的域名会是：<code>https://username.github.io/仓库名</code></li></ul></li></ul><ul><li><p>通过命令行安装<code>Fluid</code>主题 </p></li><li><p>修改博客项目根目录下的config.yml 这是整个博客的全局配置文件，找到如下字段并修改</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://username.github.io</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:category/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-string">···</span><br><span class="hljs-string">···</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span><br>  <span class="hljs-comment">#仓库地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br>  <span class="hljs-attr">message:</span><br></code></pre></div></td></tr></table></figure><ul><li>修改好后，在博客项目的根目录下打开cmd命令行/Git Bash，并执行 </li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo clean&amp;&amp;hexo g&amp;&amp;hexo deploy<br><span class="hljs-comment"># 清除缓存并重新生成静态文件，然后部署到GitHub Pages</span><br></code></pre></div></td></tr></table></figure><ul><li>通过username.github.io 域名来访问你的网站，完成部署</li></ul><h3 id="部署方式二：部署到阿里云服务器-（暂时不写，但是本人先实现的部署方式）"><a href="#部署方式二：部署到阿里云服务器-（暂时不写，但是本人先实现的部署方式）" class="headerlink" title="部署方式二：部署到阿里云服务器 （暂时不写，但是本人先实现的部署方式）"></a>部署方式二：部署到阿里云服务器 （暂时不写，但是本人先实现的部署方式）</h3><h3 id="配置优化拓展"><a href="#配置优化拓展" class="headerlink" title="配置优化拓展"></a>配置优化拓展</h3><h4 id="CDN加速访问静态资源"><a href="#CDN加速访问静态资源" class="headerlink" title="CDN加速访问静态资源"></a>CDN加速访问静态资源</h4><ul><li><p>更换域名，可通过各主流运营商购买，我购买的是阿里云的域名，而且作为学生购买域名费用极低</p><ul><li>注册阿里云账户并去购买域名（不赘述）</li><li>打开控制台，找到域名这一功能，进入域名解析，需要将域名指向自己博客的IP地址</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 通过Windows 命令行 输入一下命令，查找你网站的IP地址</span><br>ping username.github.io <br></code></pre></div></td></tr></table></figure><ul><li>然后找到 <code>解析设置</code> ，并添加记录<ul><li>主机记录：@；记录类型：A；记录值为 GitHub Pages 域名的 IP,，即 你ping到的IP地址。（@表示域名前面的前缀是泛指的）</li><li>主机记录：www；记录类型：CNAME；记录值为 GitHub Pages 域名，即 username.github.io （这里相当于把你的域名设置成了username.github.io的别名）</li><li>CNAME可以将多个访问地址映射对应同一个IP地址，在这里也就实现了既可以通过你的 <code>username.github.io</code>来访问你的网站，也可以通过你指定的新域名来访问你的网站</li></ul></li></ul><ul><li><p>这里进行一些概念解析：</p><ul><li><p>A记录，即Address记录，它并不是一个IP或者一个域名，我们可以把它理解为一种指向关系：</p><p>域名 <code>www.xxx.com</code> → 1.1.1.1 （IP地址）<br>主机名 DD → 2.2.2.2<br>也就是当你访问这些域名或者主机名的时候，DNS服务器上会通过A记录会帮你解析出相应的IP地址，以达到后续访问目的。所以A记录是IP解析，直接将域名或主机名指向某个IP。是能够访问网站的最根本方法</p></li><li><p>CNAME，也称为别名记录，咱们可以理解为给同一个网站地址取不同的访问地址，有如下的指向关系</p><ul><li><code>www.wnb.com</code> → <code>www.xxx.com</code> → 1.1.1.1</li><li><code>www.lbj.com</code> → <code>www.xxx.com</code> → 1.1.1.1</li><li><code>www.kkk.com</code> → <code>www.xxx.com</code> → 1.1.1.1</li></ul></li><li><p>那么CNAME有何用，仅仅是取个别名吗，非也，当服务器IP地址修改时，仅需通过A记录修改就能保证CNAME的正常运行，显然比你每个别名都直接指向 1.1.1.1 更加方便兼容</p></li><li>这仅是一方面，另一方面，CNAME结合CDN加速的原理能够极大的提高网站访问的速度（在不同地区，国内国外，访问一个网站速度因为服务器的关系会不同，因此需要CDN加速） 详细解析参考 <a href="https://blog.csdn.net/DD_orz/article/details/100034049">简单的解释下什么是CNAME？</a></li></ul></li></ul><ul><li>在路径 <code>博客项目根目录/source</code> 下新建一个 <code>CNAME</code> 文件，里面填写我们买的域名，注意文件不需要任何后缀。</li><li>GitHub 中打开对应仓库，在 Setting 中找到 Pages，在Custom Domain 处设置为新买的域名，旁边的一个 <code>Enforce HTTPS</code> 勾选后将为网址添加https前缀</li><li>路径 <code>博客根目录/_config.yml</code> 的<code>#URL</code> 部分，更改为新域名即可。</li></ul><h4 id="部署至CloudFlare，CDN加速"><a href="#部署至CloudFlare，CDN加速" class="headerlink" title="部署至CloudFlare，CDN加速"></a>部署至CloudFlare，CDN加速</h4><ul><li>注册 <a href="https://www.cloudflare.com/zh-cn">CloudFlare</a>  账号 </li><li>找到<code>Pages</code>选项，创建项目连接GitHub，之后选择自己的博客仓库，接着选项按默认点击即可，最后创建项目，等待几分钟完成</li><li>左侧找到<code>网站</code>选项，添加网站域名，选择 Free 免费版本，将会自动扫描你以往使用 cloudflare的DNS解析记录，如没有则会发现记录是空的，点击<code>继续</code>即可</li><li>根据提示将你当前的DNS解析服务器转移至cloudflare，我用的是阿里云服务器，因此打开阿里云控制台，找到DNS修改功能，进行修改</li></ul><p><img src="https://i.imgtg.com/2022/07/02/NGBRl.webp" alt="修改DNS" title="修改DNS"></p><ul><li>点击完成，检查更新，需要等待几分钟，待接收到邮件通知 <code>active</code></li><li>添加CloudFlare的DNS记录，像先前在阿里云控制台出添加DNS解析记录一样的操作；至于原本阿里云的DNS解析，可以删掉了，无影响</li><li>测试更新项目文件后再次部署到云端，网站的更新速度</li></ul><h4 id="永久链接，优化路径搜索"><a href="#永久链接，优化路径搜索" class="headerlink" title="永久链接，优化路径搜索"></a>永久链接，优化路径搜索</h4><p><img src="https://i.imgtg.com/2022/07/03/NGTjg.webp" alt="永久链接" title="永久链接"></p><ul><li>要使用     <code>:category/:title/</code> 这种格式设置；在 _config.yml 下 找到<code>Permalinks</code> 设为 <code>:name/</code>，这样便在url地址栏中直接显示该文章的文件名<ul><li>注意，该设置修改后，需要重新部署 在 命令行 <code>hexo clean&amp;&amp;hexo g&amp;&amp;hexo deploy</code></li></ul></li></ul><h4 id="添加网站地图，百度-谷歌收录"><a href="#添加网站地图，百度-谷歌收录" class="headerlink" title="添加网站地图，百度/谷歌收录"></a>添加网站地图，百度/谷歌收录</h4><ul><li>打开 <a href="https://ziyuan.baidu.com/">百度搜索资源平台</a> ，登录百度账号找到<code>用户中心-&gt;站点管理</code>，验证身份后添加你的网站 （注意不要用Edge浏览器，会被百度服务器拦截，改用谷歌浏览器即可）；</li><li>添加谷歌收录，打开 <a href="https://link.jianshu.com/?t=https://www.google.com/webmasters/tools/home?hl=zh-CN">Google搜索提交入口</a>，选择第二种<code>网址前缀</code> 按格式输入你的网址</li><li>选择验证网站方式，百度和谷歌收录都选择【HTML标签验证】，<code>/themes/fluid/layout/_partial/head.ejs</code> 文件，将验证标签放入 <code>&lt;head&gt;...&lt;/head&gt;</code> 中</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;baidu-site-verification&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;code-xxxxx&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;google-site-verification&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;xxxxxxxxx&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 每个网站不同，自己复制自己的即可--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><p>重新部署至云端，然后等待几分钟，点击验证成功</p></li><li><p>提交搜索后，可以选择添加<strong>站点地图</strong>使搜索引擎更智能地抓取内容：</p><ul><li>在博客目录下打开 Git Bash/cmd，输入如下命令安装：</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install hexo-generator-sitemap --save<br>npm install hexo-generator-baidu-sitemap --save<br></code></pre></div></td></tr></table></figure><ul><li>打开 <code>博客根目录/_config.yml</code>，在最下方添加如下字段：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 自动生成sitemap</span><br><span class="hljs-attr">sitemap:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">sitemap.xml</span><br><span class="hljs-attr">baidusitemap:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">baidusitemap.xml</span><br></code></pre></div></td></tr></table></figure><ul><li><p>重新部署后，等待数分钟。</p></li><li><p>打开刚才验证网站的页面，找到 <code>sitemap</code> 相关字样，输入：</p><ul><li>百度：<code>https://hwcoder.top/baidusitemap.xml</code></li><li>谷歌：<code>https://hwcoder.top/sitemap.xml</code></li></ul><p>完成以上内容后，静待两个搜索引擎收录，其他搜索引擎（bing，sougou等）同理，在搜索引擎中输入 <code>site:你的域名</code> 就可以实时查看收录结果，不过谷歌的收录需要等待一定时间（貌似7天）</p></li></ul><h4 id="使用Picx图床"><a href="#使用Picx图床" class="headerlink" title="使用Picx图床"></a>使用Picx图床</h4><ul><li>管理和载入图片资源</li><li>打开 <a href="https://picx.xpoet.cn/">Picx</a> ,按照使用教程来配置，就可以在博客中引用图片资源了</li></ul><h5 id="增加Latex-公式语法支持，需要更换Markdown渲染器（hexo自带的渲染器不支持完善的latex语法）"><a href="#增加Latex-公式语法支持，需要更换Markdown渲染器（hexo自带的渲染器不支持完善的latex语法）" class="headerlink" title="增加Latex 公式语法支持，需要更换Markdown渲染器（hexo自带的渲染器不支持完善的latex语法）"></a>增加Latex 公式语法支持，需要更换Markdown渲染器（hexo自带的渲染器不支持完善的latex语法）</h5><ul><li>使用<code>@upupming/hexo-renderer-markdown-it-plus</code> 插件<ul><li>卸载原来的渲染器，安装新的插件</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm uninstall hexo-renderer-marked --save <br><span class="hljs-comment"># 这是卸载自带的渲染器（如果已更换为别的，请对应修改）</span><br>npm install @upupming/hexo-renderer-markdown-it-plus --save<br></code></pre></div></td></tr></table></figure><ul><li>安装好之后，仅需修改根目录下的<code>_config.yml</code>或<code>_config_fluid.yml</code>文件，后者是采取了自定义修改主题全局设置增加的文件，实际上就是起到了原来的<code>_config.yml</code>的作用，但是这样做更安全，进行如下修改</li></ul><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment">#Markdown config</span><br><span class="hljs-attr">markdown_it_plus:</span><br>  <span class="hljs-attr">render:</span><br>    <span class="hljs-attr">html:</span> <span class="hljs-literal">true</span>            <br>    <span class="hljs-attr">xhtmlOut:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">breaks:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">linkify:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">typographer:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">quotes:</span> <span class="hljs-string">&#x27;“”‘’&#x27;</span><br>  <span class="hljs-attr">plugins:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-katex</span> <span class="hljs-comment">#使用支持katexc的插件</span><br>  <span class="hljs-attr">anchors:</span>  <br>    <span class="hljs-attr">level:</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">collisionSuffix:</span> <span class="hljs-string">&#x27;v&#x27;</span><br>    <span class="hljs-attr">permalink:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">permalinkClass:</span> <span class="hljs-string">header-anchor</span><br>    <span class="hljs-attr">permalinkSide:</span> <span class="hljs-string">&#x27;left&#x27;</span><br>    <span class="hljs-attr">permalinkSymbol:</span> <span class="hljs-string">¶</span><br>    <br><br></code></pre></div></td></tr></table></figure><ul><li><p>各参数解释可参考  <a href="https://blog.csdn.net/qq_36667170/article/details/105846999">更换hexo markdown渲染</a></p></li><li><p>使用<code>Mathjax</code>插件，有这些优点：对 LaTeX 语法支持全面，且右键点击公式有扩展功能菜单。参考文章<a href="https://hwcoder.top/Hexo-Configuration">Hexo配置与扩展 </a></p><ul><li>但是 Hexo 中会对一些字符转义，使得用 MathJax 渲染公式有时会出错，根据 GitHub 上的 Issue，需要找到路径 <code>node_modules\kramed\lib\rules\inline.js</code>，修改：</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//第11行：取消对 \ 和 &#123;&#125; 的转义 escape</span><br><span class="hljs-attr">escape</span>: <span class="hljs-regexp">/^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/</span>,<br><span class="hljs-built_in">escape</span>: <span class="hljs-regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,<br><span class="hljs-comment">//第20行：避免下划线 _ 被转义为斜体，而非 LaTeX 下标</span><br>em: <span class="hljs-regexp">/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,<br>em: <span class="hljs-regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,<br><span class="hljs-comment">//第64行：避免反斜杠加竖线 \| 被转义为 |，而非 LaTeX 双竖线</span><br><span class="hljs-built_in">escape</span>: replace(inline.escape)(<span class="hljs-string">&#x27;])&#x27;</span>, <span class="hljs-string">&#x27;~|])&#x27;</span>)(),<br><span class="hljs-attr">escape</span>: replace(inline.escape)(<span class="hljs-string">&#x27;])&#x27;</span>, <span class="hljs-string">&#x27;~])&#x27;</span>)(),<br></code></pre></div></td></tr></table></figure><blockquote><ul><li><p>在使用数学公式时，应当避免使用两个连续的 <code>&#123;&#125;</code>，否则会被 Hexo 解释为特殊标签，从而报错。</p></li><li><p>Hexo 对公式的支持不如 Typora 好，譬如<strong>多行公式</strong>需要用 <code>\begin&#123;aligned&#125; ... \end&#123;aligned&#125;</code>，换行符 <code>\\</code> 和定位符 <code>&amp;</code>。</p></li><li><p>Hexo 中变量的<strong>上下标</strong>只能用 LaTeX 实现而不能用 Enhanced Markdown 语法。</p></li><li><p>行内公式、公式块里的联立公式，如果含有<strong>分数</strong>或者<strong>大运算符</strong>（如求和），需要用 <code>\begin&#123;aligned&#125; ... \end&#123;aligned&#125;</code> 夹住，否则会被渲染器压扁。</p></li><li><p>公式块内如果一行有多个式子，间隙可能会被压缩，需要用 <code>\quad</code> 分隔。</p></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术拓展</category>
      
      <category>博客部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>创新优化</tag>
      
      <tag>Web-Dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷题总结</title>
    <link href="/coding01/"/>
    <url>/coding01/</url>
    
    <content type="html"><![CDATA[<h1 id="算法刷题（思路，错误点，数据结构知识点）"><a href="#算法刷题（思路，错误点，数据结构知识点）" class="headerlink" title="算法刷题（思路，错误点，数据结构知识点）"></a>算法刷题（思路，错误点，数据结构知识点）</h1><h2 id="个人总结与整理"><a href="#个人总结与整理" class="headerlink" title="个人总结与整理"></a>个人总结与整理</h2><h6 id="零钱兑换问题："><a href="#零钱兑换问题：" class="headerlink" title="零钱兑换问题："></a>零钱兑换问题：</h6><p>【动态规划，递归】 <strong>Coins change</strong></p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.<br><br>Example 1:<br><br>Input: coins = [1, 2, 5], amount = 11<br>Output: 3 <br>Explanation: 11 = 5 + 5 + 1<br>Example 2:<br><br>Input: coins = [2], amount = 3<br>Output: -1<br>Note:<br>You may assume that you have an infinite number of each kind of coin.<br></code></pre></div></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/coin-change">https://leetcode-cn.com/problems/coin-change</a></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#思路一：动态规划迭代（直接简单的套路）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">coinChange</span>(<span class="hljs-params">self, coins, amount</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type coins: List[int]</span><br><span class="hljs-string">        :type amount: int</span><br><span class="hljs-string">        :rtype: int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        dp=[amount+<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(amount+<span class="hljs-number">1</span>)] <span class="hljs-comment">#初始化记录数组,</span><br>        <span class="hljs-comment">#思考：为什么是数值一开始都是amount+1,首先这样设置的目的是方便比较，相当于设置为无穷大，其次在动态规划的过程中，向下寻找dp[i-coin]时，若找不到最少值就能保持dp[i]==amount+1即最初的最大值状态</span><br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span> <span class="hljs-comment">#最低价格为0时的答案</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(dp)):<br>            <span class="hljs-keyword">for</span> coin <span class="hljs-keyword">in</span> coins:<br>                <span class="hljs-keyword">if</span> i&lt;coin:<br>                    <span class="hljs-keyword">continue</span><br>                dp[i]=<span class="hljs-built_in">min</span>(dp[i],<span class="hljs-number">1</span>+dp[i-coin])<span class="hljs-comment">#dp[i]更新为零钱兑换所需最小值</span><br>                <span class="hljs-built_in">print</span>(dp[i])<br>        <span class="hljs-built_in">print</span>(dp)<br>        <span class="hljs-keyword">if</span> dp[amount]==amount+<span class="hljs-number">1</span>: <span class="hljs-comment">#如果更新完所有的数值后dp[-1]无解，则返回-1</span><br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> dp[amount]<br></code></pre></div></td></tr></table></figure><hr><p>采用递归解题时，常见的缺陷是：函数调用的参数是通过栈空间来传递的，在调用过程中会<strong>占用线程的栈资源</strong>。而递归调用，<strong>只有走到最后的结束点后函数才能依次退出</strong>，而未到达最后的结束点之前，占用的栈空间一直没有释放，如果递归调用次数过多，就可能导致占用的栈资源超过线程的最大值，从而导致栈溢出，导致程序的异常退出；</p><p>而大部分的递归问题，都可以通过栈实现递归转化为非递归</p><p>DFS深度优先搜索，在二叉树的题目中，其实与二叉树的前序遍历是一致的</p><p>当结合栈的运用时，要注意左子树后入栈（后进先出）</p><hr><h6 id="散列函数Hash与回溯算法"><a href="#散列函数Hash与回溯算法" class="headerlink" title="散列函数Hash与回溯算法"></a>散列函数Hash与回溯算法</h6><p>典型问题：</p><ul><li>N-Queen puzzle<br>n*n取n<br>对于每行列举1~n确定位于哪一列即为N×N量级<br>研究棋盘，有（X,Y表示行，列）：<br>abs(x1-x2)=abs(y1-y2)  表示两个点之间在同一对角线上的关系<br>由此作为判断能否进一步列举的条件<br>主要的思路是，先分析好一个子问题再演化成子问题集的合并<br>回溯模板<br>hashtable[index]=true;<br>dfs(index+1,res);<br>HashTable[index]=false;<h6 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h6></li><li><p>若二分上界超过int型数据范围的一般，在查询较靠后的数据时可能导致<br>mid=(left+right)/2 结果溢出，一般改用：mid= left + (right-left)/2</p></li><li><p>快速幂：要点</p><ul><li>幂的分解，奇偶数次项对应不同的分解方式，并利用递归</li></ul></li></ul><h6 id="快速排序与随机选择"><a href="#快速排序与随机选择" class="headerlink" title="快速排序与随机选择"></a>快速排序与随机选择</h6><ul><li><p>分析快速排序的时间复杂度</p></li><li><p>由此，如何高效的在每次递归使用快速排序开始前选好pivot能够带来优化，于是研究随机选择与two pointers思想结合</p><ul><li>tips algorithm中的sort函数运用的就是快速排序，如果能用sort尽量就直接用利于提高效率减少代码量</li></ul></li></ul><h6 id="最大公约数与最小公倍数"><a href="#最大公约数与最小公倍数" class="headerlink" title="最大公约数与最小公倍数"></a>最大公约数与最小公倍数</h6><ul><li><p>gcd(a,b) </p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> !b ? a : <span class="hljs-built_in">gcd</span>(b, a % b);<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><ul><li>lcm(a,b)= (a/gcd(a,b))*b [括号只是为了更明显的区分计算步骤，先除以最大公约数防止计算溢出]<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">return</span> a/<span class="hljs-built_in">gcd</span>(a,b)*b<br></code></pre></div></td></tr></table></figure><h6 id="动态规划-two-pointers"><a href="#动态规划-two-pointers" class="headerlink" title="动态规划 two pointers"></a>动态规划 two pointers</h6></li><li>动态规划模板：</li></ul><h6 id="素数的判断"><a href="#素数的判断" class="headerlink" title="素数的判断"></a>素数的判断</h6><ul><li>算法的依据 ： <ul><li>设 k为n的约数（在 1至n-1之间）</li><li>n%k=0 , k * (n / k ) == n; n/k与k都小于n</li><li>且能满足一个小于sqrt(n)另一个大于，因此只需要在2~sqrt(n)的向下取整范围内进行素数的判断即可<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-comment">//基本的素数判断算法</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isPrime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> sqr = (<span class="hljs-keyword">int</span>)<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1.0</span> * n);<br>    <span class="hljs-comment">//对开根号的结果向下取整，sqrt函数的参数为浮点数</span><br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= sqrt; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>常用于素数表的建立，以及寻找某数值范围内所有的素数。</li></ul></li><li><p>筛法求素数表 n数量级为以下<br><script type="math/tex">n>10^5</script> 引入数学公式写法出错</p><ul><li>依据，前面的数，其倍数若在需求的范围内，那他的倍数一定不是素数</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-comment">//该算法求的是100内的素数</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">101</span>;<br><span class="hljs-keyword">int</span> prime[maxn];<br><span class="hljs-keyword">int</span> pNum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> p[maxn] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findPrime</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//在[2,maxn)区间遍历判断</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (p[i] == <span class="hljs-literal">false</span>) <span class="hljs-comment">//若i是素数</span><br>        &#123;<br>            prime[pNum++] = i;<br>            <span class="hljs-comment">//将该素数存进表中</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + i; j &lt; maxn; j += i)<br>            &#123; <span class="hljs-comment">//筛去所有j的倍数</span><br>                p[j] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//题2: 先制表，再输出第i个素数,数组空间的大小尽量设置的比需求大一些</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-built_in">findPrime</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pNum; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, prime[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h6 id="质因子分解"><a href="#质因子分解" class="headerlink" title="质因子分解"></a>质因子分解</h6><ul><li><p>依据，结合素数判断部分的知识得出结论</p><ul><li><p>对一个正整数n来说，若在它[2,n]范围内有质因子，则质因子的分布情况无非两种</p><ul><li><p>全部在sqrt(n)左侧即&lt;=sqrt(n)</p></li><li><p>一个质因子&gt;sqrt(n),其余全部&lt;=sqrt(n)</p><p>[若有两个以上大于根号n，则p1*p2&gt;n不符合实际，因此最多只有一个在右侧]</p></li></ul></li></ul></li><li><p>算法 PAT A1059</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">int</span> prime[maxn];<br><span class="hljs-keyword">int</span> pNum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> p[maxn] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findPrime</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//在[2,maxn)区间遍历判断</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (p[i] == <span class="hljs-literal">false</span>) <span class="hljs-comment">//若i是素数</span><br>        &#123;<br>            prime[pNum++] = i;<br>            <span class="hljs-comment">//将该素数存进表中</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + i; j &lt; maxn; j += i)<br>            &#123; <span class="hljs-comment">//筛去所有j的倍数</span><br>                p[j] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">factor</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x, cnt;<br>    <span class="hljs-comment">//x is factor,cnt present numbers of factor</span><br>&#125; fac[<span class="hljs-number">10</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">findPrime</span>(); <span class="hljs-comment">//打表</span><br>    <span class="hljs-keyword">int</span> n, num = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1=1&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d=&quot;</span>, n);<br>        <span class="hljs-keyword">int</span> sqr = (<span class="hljs-keyword">int</span>)<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1.0</span> * n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pNum &amp;&amp; prime[i] &lt;= sqr; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (n % prime[i] == <span class="hljs-number">0</span>) <span class="hljs-comment">//若当前数为n的质因子</span><br>            &#123;<br>                fac[num].x = prime[i];<br>                fac[num].cnt = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> (n % prime[i] == <span class="hljs-number">0</span>)<br>                &#123;<br>                    fac[num].cnt++;<br>                    n /= prime[i];<br>                &#125;<br>                num++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (n != <span class="hljs-number">1</span>)<br>        &#123;<br>            fac[num].x = n;<br>            fac[num++].cnt = <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//存在&gt;sqrt(n)的质因子</span><br>        &#125;<br>        <span class="hljs-comment">//print</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, fac[i].x);<br>            <span class="hljs-keyword">if</span> (fac[i].cnt &gt; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;^%d&quot;</span>, fac[i].cnt);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>优化：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>cin &gt;&gt; n;<br>cout &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;=&quot;</span>;<br><br><span class="hljs-keyword">int</span> sqrtn = <span class="hljs-built_in">sqrt</span>(n), count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;= sqrtn &amp;&amp; n &gt; <span class="hljs-number">1</span>;++i) &#123;<br><span class="hljs-keyword">if</span> (count) cout &lt;&lt; <span class="hljs-string">&quot;*&quot;</span>;<br><span class="hljs-keyword">for</span> (count = <span class="hljs-number">0</span>;!(n % i) &amp;&amp; n &gt; <span class="hljs-number">1</span>;n /= i, ++count);<br><span class="hljs-keyword">if</span> (count &gt;= <span class="hljs-number">1</span>) &#123;<br>cout &lt;&lt; i;<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">1</span>) cout &lt;&lt; <span class="hljs-string">&quot;^&quot;</span> &lt;&lt; count;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (!count) cout &lt;&lt; n;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure></li></ul><h6 id="大数运算问题"><a href="#大数运算问题" class="headerlink" title="大数运算问题"></a>大数运算问题</h6><h6 id="C-STL-标准模板库"><a href="#C-STL-标准模板库" class="headerlink" title="C++ STL 标准模板库"></a>C++ STL 标准模板库</h6><ul><li><p>vector 可变长数组 </p><ul><li>二维数组定义用法:<ul><li><ol><li>vector<int> vi[100];如此定义仅二维上为可变长，一维为定长 100；</li></ol></li><li><ol><li>vector<vector<int>&gt; vi 一维和二维都是变长数组</li></ol></li></ul></li><li>访问数组<ul><li>下标访问 vi[0]</li></ul></li></ul></li><li><p>迭代器(iterator)访问 vector<int>::iterator it=vi.begin();</p><p>   it指向数组起始地址，类似指针，可通过*it来访问向量组中的元素</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">vi[i]=*(vi.<span class="hljs-built_in">begin</span>()+i)=*(it+i);<br></code></pre></div></td></tr></table></figure></li><li><p>end()函数并不指的是尾元素地址而是其下一地址，左闭右开这么理解，该地址不存储任何元素</p></li><li><p>支持自加自减操作；it++，++it<br>  拓展变形：  </p>  <figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(vector&lt;<span class="hljs-keyword">int</span>&gt;:: iterator it=vi.<span class="hljs-built_in">begin</span>();it!=vi.<span class="hljs-built_in">end</span>();it++)&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*it);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>size()函数返回的是unsigned类型，但一般用%d取整型结果问题不大</p></li><li><p>vector用处：对于不确定输入样本的按照一定格式输出的问题，利用vector来存储输入的结果再遍历输出；邻接表</p></li></ul><h6 id="set-集合"><a href="#set-集合" class="headerlink" title="set 集合"></a>set 集合</h6><ul><li></li></ul><h6 id="排序题"><a href="#排序题" class="headerlink" title="排序题"></a>排序题</h6><ul><li><p>解题思路基本都是差不多的</p></li><li><p>涉及存储量大的数据或者说以结构体的形式来进行比较</p></li><li><p>例题： A1012</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> length = <span class="hljs-number">1000000</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">int</span> rank[<span class="hljs-number">4</span>]; <span class="hljs-comment">//0-3:A,C,M,E</span><br>&#125; stu[<span class="hljs-number">2005</span>];<br><br><span class="hljs-keyword">int</span> ans[length][<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">//保存每个id下每个成绩对应的排名</span><br><span class="hljs-keyword">int</span> now;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(student a, student b)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//cmp只能带两个参数</span><br>    <span class="hljs-keyword">return</span> a.rank[now] &gt; b.rank[now];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;stu[i].id, &amp;stu[i].rank[<span class="hljs-number">1</span>], &amp;stu[i].rank[<span class="hljs-number">2</span>], &amp;stu[i].rank[<span class="hljs-number">3</span>]);<br>        stu[i].rank[<span class="hljs-number">0</span>] = <span class="hljs-built_in">round</span>((stu[i].rank[<span class="hljs-number">3</span>] + stu[i].rank[<span class="hljs-number">1</span>] + stu[i].rank[<span class="hljs-number">2</span>]) / <span class="hljs-number">3.0</span>) + <span class="hljs-number">0.5</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (now = <span class="hljs-number">0</span>; now &lt; <span class="hljs-number">4</span>; now++)<br>    &#123; <span class="hljs-comment">//依次排序</span><br>        <span class="hljs-built_in">sort</span>(stu, stu + n, cmp);<br>        <span class="hljs-comment">//第一名先设置好</span><br>        ans[stu[<span class="hljs-number">0</span>].id][now] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (stu[j].rank[now] == stu[j - <span class="hljs-number">1</span>].rank[now])<br>            &#123;<br>                <span class="hljs-comment">//则排名一样</span><br>                ans[stu[j].id][now] = ans[stu[j - <span class="hljs-number">1</span>].id][now];<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ans[stu[j].id][now] = j + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">char</span> map[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>&#125;;<br>    <span class="hljs-keyword">int</span> query;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;query);<br>        <span class="hljs-keyword">if</span> (ans[query][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N/A\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>            &#123; <span class="hljs-comment">//选出最小的数值，若大小相同则输出优先级最高的字母</span><br>                <span class="hljs-keyword">if</span> (ans[query][j] &lt; ans[query][k])<br>                &#123;<br>                    k = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %c\n&quot;</span>, ans[query][k], map[k]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>首先不要被大量的数据吓到了，要把题目理解清除，找到排序的对应要求，拆分成多个步骤来解题循序渐进</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
      <category>C++算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django建站经历</title>
    <link href="/django-dev/"/>
    <url>/django-dev/</url>
    
    <content type="html"><![CDATA[<h3 id="Django学习以及个人博客制作路程"><a href="#Django学习以及个人博客制作路程" class="headerlink" title="Django学习以及个人博客制作路程"></a>Django学习以及个人博客制作路程</h3><hr><h5 id="服务器部署步骤记录以及问题的解决"><a href="#服务器部署步骤记录以及问题的解决" class="headerlink" title="服务器部署步骤记录以及问题的解决"></a>服务器部署步骤记录以及问题的解决</h5><h6 id="修改hostname"><a href="#修改hostname" class="headerlink" title="修改hostname"></a>修改hostname</h6><ul><li><p>最好最直接不报错的办法：</p></li><li><p>在127.0.0.1 localhost 后面加上主机名称(hostname) 即可, /etc/hosts 内容修改成如下:  直接将hostname（abc）追加到后面</p></li></ul><h6 id="为了安全起见"><a href="#为了安全起见" class="headerlink" title="为了安全起见"></a>为了安全起见</h6><ul><li><p>将网站项目以及部署的文件全部保存在一个用户目录下而非root目录</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ adduser username <span class="hljs-comment">#所有命令代码开头的$只是模拟终端，可忽略</span><br></code></pre></div></td></tr></table></figure></li></ul><h6 id="正式开始项目部署"><a href="#正式开始项目部署" class="headerlink" title="正式开始项目部署"></a>正式开始项目部署</h6><ul><li><p>Python的安装，参考CSDN收藏的链接</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.5 1<br>$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2<br>//通过以上命令可以设置Python的优先级为3.6版本；在终端中输入python时会显示版本为3.6<br></code></pre></div></td></tr></table></figure><ul><li><p>上述方式在终端输入python，会默认使用你设置的版本，但是如果你想在终端输入python时显示2.7的版本，输入python3时才是你想要的版本时，需要关联一下版本。</p></li><li><p>指定python3为Python启动</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ whereis python  <br><span class="hljs-comment"># 若已经链接想要的版本就不需要往下操作了</span><br><span class="hljs-comment"># 删除软链接</span><br>$ rm /usr/bin/python<br><span class="hljs-comment">#生成制定python版本的软链接</span><br>$ ln -s /usr/bin/python3.6 /usr/bin/python<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>更新以及配置环境</p><ul><li>首要便是更新下载库： sudo apt-get update  和 apt-get upgrade</li><li>安装好需要的相关组件：Python的虚拟环境 virtualenv；git ; nginx服务器配置 ；gunicorn</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> your project address on github or gitee project-name   <span class="hljs-comment">#拉取项目 以及命名项目文件夹名称</span><br></code></pre></div></td></tr></table></figure></li><li><p>使用pip安装对应项目依赖时记住切换国内镜像源</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pip install -r requirements.txt -i http://pypi.douban.com/simple --trusted-host pypi.douban.com<br><span class="hljs-comment">#使用临时镜像源</span><br><br><span class="hljs-comment">#永久修改镜像源</span><br><span class="hljs-comment">#在指定文件中修改</span><br>mkdir -p ~/.pip<br>vim ~/.pip/pip.conf<br><span class="hljs-comment">#但这是在root目录下使用的修改，若是在某个用户目录下进行的修改，还需要修改对应目录下的.conf文件才能有效</span><br><span class="hljs-comment">#如：我的用户是yamakosu，我需要在 /home/yamakosu/.config/pip/pip.conf 文件中加入以下信息</span><br><br>[global]<br>index-url = http://pypi.douban.com/simple<br><br>[install]<br>trusted-host=pypi.douban.com<br></code></pre></div></td></tr></table></figure></li><li><p>使用pip安装所有依赖</p></li><li><p>在项目对应的虚拟环境下执行运行django项目的相关命令</p></li><li><p>在执行收集静态文件命令后 </p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cp -r ../collected_static/* static/<br><span class="hljs-comment">#将静态文件资源搬移如static中才不会报错（这是我项目的一个设计缺陷）</span><br></code></pre></div></td></tr></table></figure></li></ul><ul><li><p>内容尽量不要包含敏感信息，如密钥之类的</p><ul><li>需要Linux服务器的系统环境变量中设置相应的信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">SECRET_KEY = os.getenv(<span class="hljs-string">&#x27;CUBER_SECRETKEY&#x27;</span>, <span class="hljs-string">&#x27;your_secret_key&#x27;</span>)<br><span class="hljs-comment">#上面的即需要设置的环境变量,对应在环境变量文件中添加如下命令</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:path&quot;</span> <span class="hljs-comment">#此为添加路径的形式</span><br><span class="hljs-built_in">export</span> CUBER_SECRETKEY=<span class="hljs-string">&quot;your_secret_key&quot;</span><br><br><span class="hljs-comment">#--------------完整流程-------------</span><br>vim /etc/profile <span class="hljs-comment">#这是设置的全局变量</span><br><span class="hljs-comment">#在文档最后，添加:</span><br><span class="hljs-built_in">export</span> env_var=<span class="hljs-string">&quot;...&quot;</span><br><span class="hljs-comment"># 保存退出后执行以下命令才会生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br><span class="hljs-comment">#可env查看设置是否成功</span><br>$ env<br><br></code></pre></div></td></tr></table></figure></li></ul><ul><li><p>生成依赖列表：pip install -r requirements.txt </p></li><li><p>在服务器上运行django本地测试</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">DEBUG=True <span class="hljs-comment">#测试完后部署gunicorn记得要修改为 False</span><br><br><span class="hljs-comment"># 修改settings.py中的内容,确保服务器的8000端开放</span><br>ALLOWED_HOSTS = [<span class="hljs-string">&#x27;your ip address&#x27;</span>, <span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;0.0.0.0:8000&#x27;</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>]<br><br><span class="hljs-comment">#修改完文件后保存，运行 runserver</span><br>python manage.py runserver 0.0.0.0:8000<br><br><span class="hljs-comment">#使用 公网IP:8000 地址访问项目检查是否正常运行</span><br></code></pre></div></td></tr></table></figure></li><li><p>配置nginx以及gunicorn</p></li><li><p>免费获取SSL安全证书</p><ul><li><p>设置定时任务，利用linux系统的crontab</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">查看任务： crontab -l<br>编辑任务： crontab -e<br>1.Ctrl+O  写入<br>2.出现“FIile name to Write...”，输入Enter<br>3.Ctrl+x 保存输出<br>提示“crontab:installing new crontab”表示成功<br>  <br><span class="hljs-comment">#最后下述命令使任务生效</span><br>sudo service cron restart<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>服务器上运行测试成功后要记得将settings.py的DEBUG模式修改为False,以及将ALLOW_HOST 修改</p></li><li><p>尽量提前备份数据库文件方便移植</p></li><li><p>开放端口号4497为SSH远程连接，安全性更高</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo netstat -tunlp | grep <span class="hljs-string">&quot;ssh&quot;</span> <span class="hljs-comment">#查看当前监听的端口号</span><br><br><span class="hljs-comment">#修改端口号</span><br>$ sudo vim /etc/ssh/sshd_config<br><br>Port 22<br>Port 4497<br><br>测试中涉及到端口号，对此作总结：<br>一般用到的是1~65535。<br>其中0不使用，1-1023为系统端口，也叫BSD保留端口。<br>0-1023  <span class="hljs-comment">#BSD保留端口，也叫系统端口，这些端口只有系统特许的进程才能使用；</span><br>1024-65535 <span class="hljs-comment">#为用户端口，又分为：BSD临时端口(1024-5000)和BSD服务器(非特权)端口(5001-65535)。其中：</span><br>1024-5000 <span class="hljs-comment"># BSD临时端口，一般的应用程序使用1024到4999来进行通讯；</span><br>5001-65535 <span class="hljs-comment">#BSD服务器(非特权)端口，用来给用户自定义端口。</span><br><br><span class="hljs-comment">#重启ssh服务使配置生效</span><br>$ service sshd restart<br>$ sudo netstat -tunlp | grep <span class="hljs-string">&quot;ssh&quot;</span> <span class="hljs-comment">#查看当前监听的端口号验证是否设置成功</span><br><br>最后用Xshell测试4497端口连接，成功后将22端口屏蔽保证安全<br>步骤同上，修改配置文件并重启服务<br></code></pre></div></td></tr></table></figure><ul><li><p>网站上传图片前需要修改nginx的上传文件大小上限</p></li><li><p>默认上传文件的大小是1M，可nginx的设置中修改。<br>打开nginx配置文件 nginx.conf, 路径一般是：/etc/nginx/nginx.conf。<br>在http{}段中加入 client_max_body_size 20m; 20m为允许最大上传的大小。<br>保存后重启nginx，问题解决</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ vim /etc/nginx/nginx.conf <br><br><span class="hljs-comment">#如下修改</span><br><br>http &#123;<br>        <span class="hljs-comment">##</span><br>        <span class="hljs-comment"># Basic Settings</span><br>        <span class="hljs-comment">##</span><br>        sendfile on;<br>        tcp_nopush on;<br>        tcp_nodelay on;<br>        keepalive_timeout 65;<br>        types_hash_max_size 2048;<br>        client_header_timeout 120s;<br>        client_body_timeout 120s;<br>        client_max_body_size 30m; <span class="hljs-comment">#设置最大限制30m</span><br>        client_body_buffer_size 256k;<br>        <span class="hljs-comment"># server_tokens off;</span><br>        ...<br>&#125;<br><br>$ sudo nginx -t<br>$ sudo systemctl restart nginx<br></code></pre></div></td></tr></table></figure></li><li><p>若是修改gunicorn或Django项目文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo systemctl daemon-reload<br>$ sudo systemctl restart gunicorn_tendcode <span class="hljs-comment">#只修改了django文件，只需执行该命令</span><br></code></pre></div></td></tr></table></figure></li></ul><hr><h5 id="网站的设计与改进"><a href="#网站的设计与改进" class="headerlink" title="网站的设计与改进"></a>网站的设计与改进</h5><h6 id="设计部分（目标）"><a href="#设计部分（目标）" class="headerlink" title="设计部分（目标）"></a>设计部分（目标）</h6><ul><li>文字附上删除线表示已完成</li></ul><p><del>博客的权限设置为只有我自己能写文</del></p><p><del>优化用户登录，注册，写文章页面</del> <del>为了方便审核暂时取消用户功能</del></p><p>文章列表添加标题图，<del>标题图鼠标悬浮中心放大</del>:</p><p>实现过程： 1. 添加标题图元素至数据库模型中-考虑数据大小与格式，是否需要换乘mysql作为数据库</p><p>​                    2.添加标题图，即上传图片到项目中，Pillow为插件—上传与打开图片要求如下</p><ul><li>核验上传文件格式是否为图片-jpg,png</li><li>上传时能够压缩图片（预先处理-压缩，大小控制）</li><li>从数据库读取图片文件时<del>自动修改图片为统一大小</del></li><li>图片不存在时是否使用默认图片作补充</li><li>图片不作为超链接Docker部署</li><li>增加时间轴页，浏览网站时间线事件</li><li><p>添加网站地图，便于检索</p></li><li><p><del>增加面包屑导航，更加直观的导向</del></p></li></ul><h6 id="改进部分（创新与迭代）"><a href="#改进部分（创新与迭代）" class="headerlink" title="改进部分（创新与迭代）"></a>改进部分（创新与迭代）</h6><ul><li><p>时间轴与个性化内容展示</p></li><li><p>11.4 对首页进行优化，以首页为基础进行设备兼容展示网页内容的改进，个人认为开发效率较低。</p><ol><li>个人认为是前端知识的不充足导致的，虽然有基础但实现起来较难，而且在开发代码的时候，习惯不好，用VSCODE会出现添加一段代码就实时查看一次效果的习惯，虽然这样可以时刻观察开发进度，但耗时。</li><li>还是有必要思考清除步骤，下次开发前，先对自己要实现的功能有个初步了解，同时要联系已有的代码再进行系统的更新，不然维护起来很麻烦。</li></ol><ul><li><p>目前的目标：实现一个通过在首页点击自动下滑到文章列表的主页效果。</p><p>博客样式设计更新—————-</p><ul><li><p>思考如何简化代码量</p><ul><li><del>侧边回到顶部按钮统一</del></li></ul></li></ul></li></ul></li></ul><ul><li>博客的数据库文件要备份—后期可以转用mysql， .db文件可以在每次项目文件全部重载时，先备份到指定文件夹下，然后再重新复制到项目文件夹里</li><li>可以考虑结合Vue设计前后端分离模式</li></ul><h6 id="开发过程中的问题"><a href="#开发过程中的问题" class="headerlink" title="开发过程中的问题"></a>开发过程中的问题</h6><ul><li>HTML的编写不熟练</li></ul><hr><h5 id="后台设计："><a href="#后台设计：" class="headerlink" title="后台设计："></a>后台设计：</h5><ul><li><p>先了解Xadmin的使用与项目的结合</p></li><li><p>后台的板块设计，功能设计</p><ul><li><p>自定义界面</p><ul><li><p>后台管理登录</p></li><li><p>后台首页：</p><p>1.侧边栏按钮（网站各主要信息板块）</p><p>2.进入首页自动生成统计图表</p><ul><li>访问量</li><li>点赞数</li><li>解析IP地址-用户分布图</li><li>调用Echarts插件来制图</li></ul></li></ul></li></ul></li><li><p>各模块的优化设计</p><ul><li>文章 Article Post<ul><li>title</li><li>body</li><li>create_time</li><li>update_time</li><li>字数统计（可以后期添加，当做python学习的另一种方式）</li><li>文章的转载许可与开源性</li></ul></li><li>用户版块（暂且不使用）</li><li>评论模块（与用户版块结合才行）</li><li>一些小功能的设计（以后再说）<ul><li>在线功能，网站作为一个接口</li><li>自制导航页<ul><li>节省访问流量（背景不同高清图，用一种CSS设计的图片就行了）</li><li>百度搜索引擎接口</li><li>一些常用网址链接展示</li></ul></li></ul></li></ul></li></ul><h3 id="开启新的旅程！"><a href="#开启新的旅程！" class="headerlink" title="开启新的旅程！"></a>开启新的旅程！</h3><h4 id="HEXO-博客的安装，分本地和服务器部署"><a href="#HEXO-博客的安装，分本地和服务器部署" class="headerlink" title="HEXO 博客的安装，分本地和服务器部署"></a>HEXO 博客的安装，分本地和服务器部署</h4><ul><li><p>使用hexo主题快速搭建博客</p></li><li><p>npm@7.14.0</p></li><li><p>服务器安装npm</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo npm install -g n<br>sudo n stable<br>PATH=<span class="hljs-variable">$PATH</span><br><br>//修改指定端口连接服务器并发布<br>deploy:<br>- <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;git&#x27;</span><br>  repo:<br>     site: ssh://username@ip:port/path/blog.git,master<br>- <span class="hljs-built_in">type</span>: baidu_url_submitter <br><br><br><span class="hljs-comment">#查看远程连接端口</span><br>netstat -tunlp | grep ssh<br><span class="hljs-comment">#修改ssh服务配置</span><br>vim /etc/ssh/sshd_config<br><br><span class="hljs-comment">#重启ssh服务使配置生效</span><br>service ssh restart<br><br></code></pre></div></td></tr></table></figure><h4 id="HEXO博客的自定义设计"><a href="#HEXO博客的自定义设计" class="headerlink" title="HEXO博客的自定义设计"></a>HEXO博客的自定义设计</h4><ul><li>如何修改主题样式</li><li>修改footer样式，别搞这么多东西</li></ul><h4 id="进阶功能"><a href="#进阶功能" class="headerlink" title="进阶功能"></a>进阶功能</h4><ul><li>Picx图床（免费，GitHub作为仓库，网络上是公开的）<ul><li>暂时使用七牛云</li></ul></li><li>资源压缩</li><li>网站地图（百度搜索，谷歌搜索），知识共享</li><li>能否使用echarts工具做一些有趣的工具</li><li>为网站添加一些在线工具（由于可以直接创建一个新页面在菜单栏并跳转，且新页面的文本可用html语句编写，就可以用于开发新页面）</li></ul><hr><h5 id="总结与反思"><a href="#总结与反思" class="headerlink" title="总结与反思"></a>总结与反思</h5>]]></content>
    
    
    <categories>
      
      <category>技术拓展</category>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web-Dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
