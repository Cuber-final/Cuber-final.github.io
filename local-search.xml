<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>部署博客和优化配置</title>
    <link href="/deployBlog/"/>
    <url>/deployBlog/</url>
    
    <content type="html"><![CDATA[<h2 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h2><h3 id="部署方式一-部署到GitHub-Pages"><a href="#部署方式一-部署到GitHub-Pages" class="headerlink" title="部署方式一 部署到GitHub Pages"></a>部署方式一 部署到GitHub Pages</h3><ul><li><p>搭建好开发环境相关的工作， 涉及如下（细节不赘述，网上可以检索到相关的搭建教程），仅供参考 <a href="https://blog.csdn.net/qq_35561857/article/details/81590953">hexo安装配置教程</a></p><ul><li>npm</li><li>Git ，Git Bash 以及 Git SSH 配置 </li><li>安装 Hexo</li></ul></li><li><p>注册好GitHub 账号，接着创建一个公开仓库（public）并且以 <code>username.github.io</code> 命名仓库 </p><ul><li>这样写的原因是，需要通过域名 <code>https://username.github.io </code> 来访问你的网站；如果仓库取了其他名字，最后访问的域名会是：<code>https://username.github.io/仓库名 </code></li></ul></li></ul><ul><li><p>通过命令行安装<code>Fluid</code>主题 </p></li><li><p>修改博客项目根目录下的config.yml 这是整个博客的全局配置文件，找到如下字段并修改</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://username.github.io</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:category/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-string">···</span><br><span class="hljs-string">···</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span><br>  <span class="hljs-comment">#仓库地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br>  <span class="hljs-attr">message:</span><br></code></pre></div></td></tr></table></figure><ul><li>修改好后，在博客项目的根目录下打开cmd命令行/Git Bash，并执行 </li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo clean&amp;&amp;hexo g&amp;&amp;hexo deploy<br><span class="hljs-comment"># 清除缓存并重新生成静态文件，然后部署到GitHub Pages</span><br></code></pre></div></td></tr></table></figure><ul><li>通过username.github.io 域名来访问你的网站，完成部署</li></ul><h3 id="部署方式二：部署到阿里云服务器-（暂时不写，但是本人先实现的部署方式）"><a href="#部署方式二：部署到阿里云服务器-（暂时不写，但是本人先实现的部署方式）" class="headerlink" title="部署方式二：部署到阿里云服务器 （暂时不写，但是本人先实现的部署方式）"></a>部署方式二：部署到阿里云服务器 （暂时不写，但是本人先实现的部署方式）</h3><h3 id="配置优化拓展"><a href="#配置优化拓展" class="headerlink" title="配置优化拓展"></a>配置优化拓展</h3><h4 id="CDN加速访问静态资源"><a href="#CDN加速访问静态资源" class="headerlink" title="CDN加速访问静态资源"></a>CDN加速访问静态资源</h4><ul><li><p>更换域名，可通过各主流运营商购买，我购买的是阿里云的域名，而且作为学生购买域名费用极低</p><ul><li>注册阿里云账户并去购买域名（不赘述）</li><li>打开控制台，找到域名这一功能，进入域名解析，需要将域名指向自己博客的IP地址</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 通过Windows 命令行 输入一下命令，查找你网站的IP地址</span><br>ping username.github.io <br></code></pre></div></td></tr></table></figure><ul><li><p>然后找到 <code>解析设置</code> ，并添加记录</p><ul><li>主机记录：<code>www</code>；记录类型：<code>A</code>；记录值为 GitHub Pages 域名的 IP，即 你ping到的IP地址。</li><li>主机记录：<code>@</code>；记录类型：<code>CNAME</code>；记录值为 GitHub Pages 域名，即 <code>username.github.io </code></li><li>CNAME可以将多个访问地址映射对应同一个IP地址，在这里也就实现了既可以通过你的 <code>username.github.io </code>来访问你的网站，也可以通过你指定的新域名来访问你的网站</li></ul></li><li><p>这里进行一些概念解析：</p><ul><li><p>A记录，即Address记录，它并不是一个IP或者一个域名，我们可以把它理解为一种指向关系：</p><p>域名 <code>www.xxx.com</code> → 1.1.1.1 （IP地址）<br>主机名 DD → 2.2.2.2<br>也就是当你访问这些域名或者主机名的时候，DNS服务器上会通过A记录会帮你解析出相应的IP地址，以达到后续访问目的。所以A记录是IP解析，直接将域名或主机名指向某个IP。是能够访问网站的最根本方法</p></li><li><p>CNAME，也称为别名记录，咱们可以理解为给同一个网站地址取不同的访问地址，有如下的指向关系</p><ul><li><code>www.wnb.com</code> → <code>www.xxx.com</code> → 1.1.1.1</li><li><code>www.lbj.com</code> → <code>www.xxx.com</code> → 1.1.1.1</li><li><code>www.kkk.com</code> → <code>www.xxx.com</code> → 1.1.1.1</li></ul></li><li><p>那么CNAME有何用，仅仅是取个别名吗，非也，当服务器IP地址修改时，仅需通过A记录修改就能保证CNAME的正常运行，显然比你每个别名都直接指向 1.1.1.1 更加方便兼容</p></li><li><p>这仅是一方面，另一方面，CNAME结合CDN加速的原理能够极大的提高网站访问的速度（在不同地区，国内国外，访问一个网站速度因为服务器的关系会不同，因此需要CDN加速） 详细解析参考 <a href="https://blog.csdn.net/DD_orz/article/details/100034049">简单的解释下什么是CNAME？</a></p></li></ul></li></ul><ul><li>在路径 <code>博客项目根目录/source</code> 下新建一个 <code>CNAME</code> 文件，里面填写我们买的域名，注意文件不需要任何后缀。</li><li>GitHub 中打开对应仓库，在 Setting 中找到 Pages，在Custom Domain 处设置为新买的域名，旁边的一个 <code>Enforce HTTPS</code> 勾选后将为网址添加https前缀</li><li>路径 <code>博客根目录/_config.yml</code> 的<code>#URL</code> 部分，更改为新域名即可。</li></ul><h4 id="部署至CloudFlare，CDN加速"><a href="#部署至CloudFlare，CDN加速" class="headerlink" title="部署至CloudFlare，CDN加速"></a>部署至CloudFlare，CDN加速</h4><ul><li>注册 <a href="https://www.cloudflare.com/zh-cn">CloudFlare</a>  账号 </li><li>找到<code>Pages </code>选项，创建项目连接GitHub，之后选择自己的博客仓库，接着选项按默认点击即可，最后创建项目，等待几分钟完成</li><li>左侧找到<code>网站</code>选项，添加网站域名，选择 Free 免费版本，将会自动扫描你以往使用 cloudflare的DNS解析记录，如没有则会发现记录是空的，点击<code>继续</code>即可</li><li>根据提示将你当前的DNS解析服务器转移至cloudflare，我用的是阿里云服务器，因此打开阿里云控制台，找到DNS修改功能，进行修改</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Cuber-final/myblog_statics@master/posts/deployBlog/dns.1fwym169jj9c.webp" alt="修改DNS" title="修改DNS"></p><ul><li>点击完成，检查更新，需要等待几分钟，待接收到邮件通知 <code>active</code></li><li>添加CloudFlare的DNS记录，像先前在阿里云控制台出添加DNS解析记录一样的操作；至于原本阿里云的DNS解析，可以删掉了，无影响</li><li>测试更新项目文件后再次部署到云端，网站的更新速度</li></ul><h4 id="永久链接，优化路径搜索"><a href="#永久链接，优化路径搜索" class="headerlink" title="永久链接，优化路径搜索"></a>永久链接，优化路径搜索</h4><p><img src="https://cdn.jsdelivr.net/gh/Cuber-final/myblog_statics@master/posts/deployBlog/parmalinks.5ri33vixsgs0.webp" alt="永久链接" title="永久链接"></p><ul><li>要使用     <code>:category/:title/ </code> 这种格式设置；在 _config.yml 下 找到<code>Permalinks</code> 设为 <code>:name/</code>，这样便在url地址栏中直接显示该文章的文件名<ul><li>注意，该设置修改后，需要重新部署 在 命令行 <code>hexo clean&amp;&amp;hexo g&amp;&amp;hexo deploy</code></li></ul></li></ul><h4 id="添加网站地图，百度-谷歌收录"><a href="#添加网站地图，百度-谷歌收录" class="headerlink" title="添加网站地图，百度/谷歌收录"></a>添加网站地图，百度/谷歌收录</h4><ul><li>打开 <a href="https://ziyuan.baidu.com/">百度搜索资源平台</a> ，登录百度账号找到<code>用户中心-&gt;站点管理</code>，验证身份后添加你的网站 （注意不要用Edge浏览器，会被百度服务器拦截，改用谷歌浏览器即可）；</li><li>添加谷歌收录，打开 <a href="https://link.jianshu.com/?t=https://www.google.com/webmasters/tools/home?hl=zh-CN">Google搜索提交入口</a>，选择第二种<code>网址前缀</code> 按格式输入你的网址</li><li>选择验证网站方式，百度和谷歌收录都选择【HTML标签验证】，<code>/themes/fluid/layout/_partial/head.ejs</code> 文件，将验证标签放入 <code>&lt;head&gt;...&lt;/head&gt;</code> 中</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;baidu-site-verification&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;code-xxxxx&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;google-site-verification&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;xxxxxxxxx&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 每个网站不同，自己复制自己的即可--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><p>重新部署至云端，然后等待几分钟，点击验证成功</p></li><li><p>提交搜索后，可以选择添加<strong>站点地图</strong>使搜索引擎更智能地抓取内容：</p><ul><li>在博客目录下打开 Git Bash/cmd，输入如下命令安装：</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install hexo-generator-sitemap --save<br>npm install hexo-generator-baidu-sitemap --save<br></code></pre></div></td></tr></table></figure><ul><li>打开 <code>博客根目录/_config.yml</code>，在最下方添加如下字段：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 自动生成sitemap</span><br><span class="hljs-attr">sitemap:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">sitemap.xml</span><br><span class="hljs-attr">baidusitemap:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">baidusitemap.xml</span><br></code></pre></div></td></tr></table></figure><ul><li><p>重新部署后，等待数分钟。</p></li><li><p>打开刚才验证网站的页面，找到 <code>sitemap</code> 相关字样，输入：</p><ul><li>百度：<code>https://hwcoder.top/baidusitemap.xml</code></li><li>谷歌：<code>https://hwcoder.top/sitemap.xml</code></li></ul></li></ul><p>  完成以上内容后，静待两个搜索引擎收录，其他搜索引擎（bing，sougou等）同理，在搜索引擎中输入 <code>site:你的域名</code> 就可以实时查看收录结果，不过谷歌的收录需要等待一定时间（貌似7天）</p><h4 id="使用Picx图床"><a href="#使用Picx图床" class="headerlink" title="使用Picx图床"></a>使用Picx图床</h4><ul><li>管理和载入图片资源</li><li>打开 <a href="https://picx.xpoet.cn/">Picx</a> ,按照使用教程来配置，就可以在博客中引用图片资源了</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术拓展</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web-Dev</tag>
      
      <tag>创新优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷题总结</title>
    <link href="/coding01/"/>
    <url>/coding01/</url>
    
    <content type="html"><![CDATA[<h1 id="算法刷题（思路，错误点，数据结构知识点）"><a href="#算法刷题（思路，错误点，数据结构知识点）" class="headerlink" title="算法刷题（思路，错误点，数据结构知识点）"></a>算法刷题（思路，错误点，数据结构知识点）</h1><h2 id="个人总结与整理"><a href="#个人总结与整理" class="headerlink" title="个人总结与整理"></a>个人总结与整理</h2><h6 id="零钱兑换问题："><a href="#零钱兑换问题：" class="headerlink" title="零钱兑换问题："></a>零钱兑换问题：</h6><p>【动态规划，递归】 <strong>Coins change</strong></p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.<br><br>Example 1:<br><br>Input: coins = [1, 2, 5], amount = 11<br>Output: 3 <br>Explanation: 11 = 5 + 5 + 1<br>Example 2:<br><br>Input: coins = [2], amount = 3<br>Output: -1<br>Note:<br>You may assume that you have an infinite number of each kind of coin.<br></code></pre></div></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/coin-change">https://leetcode-cn.com/problems/coin-change</a></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#思路一：动态规划迭代（直接简单的套路）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">coinChange</span>(<span class="hljs-params">self, coins, amount</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type coins: List[int]</span><br><span class="hljs-string">        :type amount: int</span><br><span class="hljs-string">        :rtype: int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        dp=[amount+<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(amount+<span class="hljs-number">1</span>)] <span class="hljs-comment">#初始化记录数组,</span><br>        <span class="hljs-comment">#思考：为什么是数值一开始都是amount+1,首先这样设置的目的是方便比较，相当于设置为无穷大，其次在动态规划的过程中，向下寻找dp[i-coin]时，若找不到最少值就能保持dp[i]==amount+1即最初的最大值状态</span><br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span> <span class="hljs-comment">#最低价格为0时的答案</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(dp)):<br>            <span class="hljs-keyword">for</span> coin <span class="hljs-keyword">in</span> coins:<br>                <span class="hljs-keyword">if</span> i&lt;coin:<br>                    <span class="hljs-keyword">continue</span><br>                dp[i]=<span class="hljs-built_in">min</span>(dp[i],<span class="hljs-number">1</span>+dp[i-coin])<span class="hljs-comment">#dp[i]更新为零钱兑换所需最小值</span><br>                <span class="hljs-built_in">print</span>(dp[i])<br>        <span class="hljs-built_in">print</span>(dp)<br>        <span class="hljs-keyword">if</span> dp[amount]==amount+<span class="hljs-number">1</span>: <span class="hljs-comment">#如果更新完所有的数值后dp[-1]无解，则返回-1</span><br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> dp[amount]<br></code></pre></div></td></tr></table></figure><hr><p>采用递归解题时，常见的缺陷是：函数调用的参数是通过栈空间来传递的，在调用过程中会<strong>占用线程的栈资源</strong>。而递归调用，<strong>只有走到最后的结束点后函数才能依次退出</strong>，而未到达最后的结束点之前，占用的栈空间一直没有释放，如果递归调用次数过多，就可能导致占用的栈资源超过线程的最大值，从而导致栈溢出，导致程序的异常退出；</p><p>而大部分的递归问题，都可以通过栈实现递归转化为非递归</p><p>DFS深度优先搜索，在二叉树的题目中，其实与二叉树的前序遍历是一致的</p><p>当结合栈的运用时，要注意左子树后入栈（后进先出）</p><hr><h6 id="散列函数Hash与回溯算法"><a href="#散列函数Hash与回溯算法" class="headerlink" title="散列函数Hash与回溯算法"></a>散列函数Hash与回溯算法</h6><p>典型问题：</p><ul><li><p>N-Queen puzzle<br>n*n取n<br>对于每行列举1~n确定位于哪一列即为N×N量级<br>研究棋盘，有（X,Y表示行，列）：<br>abs(x1-x2)=abs(y1-y2)  表示两个点之间在同一对角线上的关系<br>由此作为判断能否进一步列举的条件<br>主要的思路是，先分析好一个子问题再演化成子问题集的合并<br>回溯模板<br>hashtable[index]=true;<br>dfs(index+1,res);<br>HashTable[index]=false;</p><h6 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h6></li><li><p>若二分上界超过int型数据范围的一般，在查询较靠后的数据时可能导致<br>mid=(left+right)/2 结果溢出，一般改用：mid= left + (right-left)/2</p></li><li><p>快速幂：要点</p><ul><li>幂的分解，奇偶数次项对应不同的分解方式，并利用递归</li></ul></li></ul><h6 id="快速排序与随机选择"><a href="#快速排序与随机选择" class="headerlink" title="快速排序与随机选择"></a>快速排序与随机选择</h6><ul><li><p>分析快速排序的时间复杂度</p></li><li><p>由此，如何高效的在每次递归使用快速排序开始前选好pivot能够带来优化，于是研究随机选择与two pointers思想结合</p><ul><li>tips algorithm中的sort函数运用的就是快速排序，如果能用sort尽量就直接用利于提高效率减少代码量</li></ul></li></ul><h6 id="最大公约数与最小公倍数"><a href="#最大公约数与最小公倍数" class="headerlink" title="最大公约数与最小公倍数"></a>最大公约数与最小公倍数</h6><ul><li><p>gcd(a,b) </p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> !b ? a : <span class="hljs-built_in">gcd</span>(b, a % b);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>lcm(a,b)= (a/gcd(a,b))*b [括号只是为了更明显的区分计算步骤，先除以最大公约数防止计算溢出]</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">return</span> a/<span class="hljs-built_in">gcd</span>(a,b)*b<br></code></pre></div></td></tr></table></figure><h6 id="动态规划-two-pointers"><a href="#动态规划-two-pointers" class="headerlink" title="动态规划 two pointers"></a>动态规划 two pointers</h6></li><li><p>动态规划模板：</p></li></ul><h6 id="素数的判断"><a href="#素数的判断" class="headerlink" title="素数的判断"></a>素数的判断</h6><ul><li><p>算法的依据 ： </p><ul><li>设 k为n的约数（在 1至n-1之间）</li><li>n%k=0 , k * (n / k ) == n; n/k与k都小于n</li><li>且能满足一个小于sqrt(n)另一个大于，因此只需要在2~sqrt(n)的向下取整范围内进行素数的判断即可<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-comment">//基本的素数判断算法</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isPrime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> sqr = (<span class="hljs-keyword">int</span>)<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1.0</span> * n);<br>    <span class="hljs-comment">//对开根号的结果向下取整，sqrt函数的参数为浮点数</span><br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= sqrt; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>常用于素数表的建立，以及寻找某数值范围内所有的素数。</li></ul></li><li><p>筛法求素数表 n数量级为以下<br>$$ n&gt;10^5 $$ 引入数学公式写法出错</p><ul><li>依据，前面的数，其倍数若在需求的范围内，那他的倍数一定不是素数</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-comment">//该算法求的是100内的素数</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">101</span>;<br><span class="hljs-keyword">int</span> prime[maxn];<br><span class="hljs-keyword">int</span> pNum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> p[maxn] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findPrime</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//在[2,maxn)区间遍历判断</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (p[i] == <span class="hljs-literal">false</span>) <span class="hljs-comment">//若i是素数</span><br>        &#123;<br>            prime[pNum++] = i;<br>            <span class="hljs-comment">//将该素数存进表中</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + i; j &lt; maxn; j += i)<br>            &#123; <span class="hljs-comment">//筛去所有j的倍数</span><br>                p[j] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//题2: 先制表，再输出第i个素数,数组空间的大小尽量设置的比需求大一些</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-built_in">findPrime</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pNum; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, prime[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h6 id="质因子分解"><a href="#质因子分解" class="headerlink" title="质因子分解"></a>质因子分解</h6><ul><li><p>依据，结合素数判断部分的知识得出结论</p><ul><li>对一个正整数n来说，若在它[2,n]范围内有质因子，则质因子的分布情况无非两种<ul><li>全部在sqrt(n)左侧即&lt;=sqrt(n)</li><li>一个质因子&gt;sqrt(n),其余全部&lt;=sqrt(n)[若有两个以上大于根号n，则p1*p2&gt;n不符合实际，因此最多只有一个在右侧]</li></ul></li></ul></li><li><p>算法 PAT A1059</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">int</span> prime[maxn];<br><span class="hljs-keyword">int</span> pNum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> p[maxn] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findPrime</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//在[2,maxn)区间遍历判断</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (p[i] == <span class="hljs-literal">false</span>) <span class="hljs-comment">//若i是素数</span><br>        &#123;<br>            prime[pNum++] = i;<br>            <span class="hljs-comment">//将该素数存进表中</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + i; j &lt; maxn; j += i)<br>            &#123; <span class="hljs-comment">//筛去所有j的倍数</span><br>                p[j] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">factor</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x, cnt;<br>    <span class="hljs-comment">//x is factor,cnt present numbers of factor</span><br>&#125; fac[<span class="hljs-number">10</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">findPrime</span>(); <span class="hljs-comment">//打表</span><br>    <span class="hljs-keyword">int</span> n, num = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1=1&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d=&quot;</span>, n);<br>        <span class="hljs-keyword">int</span> sqr = (<span class="hljs-keyword">int</span>)<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1.0</span> * n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pNum &amp;&amp; prime[i] &lt;= sqr; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (n % prime[i] == <span class="hljs-number">0</span>) <span class="hljs-comment">//若当前数为n的质因子</span><br>            &#123;<br>                fac[num].x = prime[i];<br>                fac[num].cnt = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> (n % prime[i] == <span class="hljs-number">0</span>)<br>                &#123;<br>                    fac[num].cnt++;<br>                    n /= prime[i];<br>                &#125;<br>                num++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (n != <span class="hljs-number">1</span>)<br>        &#123;<br>            fac[num].x = n;<br>            fac[num++].cnt = <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//存在&gt;sqrt(n)的质因子</span><br>        &#125;<br>        <span class="hljs-comment">//print</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, fac[i].x);<br>            <span class="hljs-keyword">if</span> (fac[i].cnt &gt; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;^%d&quot;</span>, fac[i].cnt);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>优化：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>cin &gt;&gt; n;<br>cout &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;=&quot;</span>;<br><br><span class="hljs-keyword">int</span> sqrtn = <span class="hljs-built_in">sqrt</span>(n), count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;= sqrtn &amp;&amp; n &gt; <span class="hljs-number">1</span>;++i) &#123;<br><span class="hljs-keyword">if</span> (count) cout &lt;&lt; <span class="hljs-string">&quot;*&quot;</span>;<br><span class="hljs-keyword">for</span> (count = <span class="hljs-number">0</span>;!(n % i) &amp;&amp; n &gt; <span class="hljs-number">1</span>;n /= i, ++count);<br><span class="hljs-keyword">if</span> (count &gt;= <span class="hljs-number">1</span>) &#123;<br>cout &lt;&lt; i;<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">1</span>) cout &lt;&lt; <span class="hljs-string">&quot;^&quot;</span> &lt;&lt; count;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (!count) cout &lt;&lt; n;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure></li></ul><h6 id="大数运算问题"><a href="#大数运算问题" class="headerlink" title="大数运算问题"></a>大数运算问题</h6><h6 id="C-STL-标准模板库"><a href="#C-STL-标准模板库" class="headerlink" title="C++ STL 标准模板库"></a>C++ STL 标准模板库</h6><ul><li><p>vector 可变长数组 </p><ul><li>二维数组定义用法:<ul><li><ol><li>vector<int> vi[100];如此定义仅二维上为可变长，一维为定长 100；</li></ol></li><li><ol start="2"><li>vector&lt;vector<int>&gt; vi 一维和二维都是变长数组</li></ol></li></ul></li><li>访问数组<ul><li>下标访问 vi[0]</li></ul></li></ul></li><li><p>迭代器(iterator)访问 vector<int>::iterator it=vi.begin();</p><p>   it指向数组起始地址，类似指针，可通过*it来访问向量组中的元素</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">vi[i]=*(vi.<span class="hljs-built_in">begin</span>()+i)=*(it+i);<br></code></pre></div></td></tr></table></figure></li><li><p>end()函数并不指的是尾元素地址而是其下一地址，左闭右开这么理解，该地址不存储任何元素</p></li><li><p>支持自加自减操作；it++，++it<br>  拓展变形：  </p>  <figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(vector&lt;<span class="hljs-keyword">int</span>&gt;:: iterator it=vi.<span class="hljs-built_in">begin</span>();it!=vi.<span class="hljs-built_in">end</span>();it++)&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*it);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>size()函数返回的是unsigned类型，但一般用%d取整型结果问题不大</p></li><li><p>vector用处：对于不确定输入样本的按照一定格式输出的问题，利用vector来存储输入的结果再遍历输出；邻接表</p></li></ul><h6 id="set-集合"><a href="#set-集合" class="headerlink" title="set 集合"></a>set 集合</h6><ul><li></li></ul><h6 id="排序题"><a href="#排序题" class="headerlink" title="排序题"></a>排序题</h6><ul><li><p>解题思路基本都是差不多的</p></li><li><p>涉及存储量大的数据或者说以结构体的形式来进行比较</p></li><li><p>例题： A1012</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> length = <span class="hljs-number">1000000</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">int</span> rank[<span class="hljs-number">4</span>]; <span class="hljs-comment">//0-3:A,C,M,E</span><br>&#125; stu[<span class="hljs-number">2005</span>];<br><br><span class="hljs-keyword">int</span> ans[length][<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">//保存每个id下每个成绩对应的排名</span><br><span class="hljs-keyword">int</span> now;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(student a, student b)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//cmp只能带两个参数</span><br>    <span class="hljs-keyword">return</span> a.rank[now] &gt; b.rank[now];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;stu[i].id, &amp;stu[i].rank[<span class="hljs-number">1</span>], &amp;stu[i].rank[<span class="hljs-number">2</span>], &amp;stu[i].rank[<span class="hljs-number">3</span>]);<br>        stu[i].rank[<span class="hljs-number">0</span>] = <span class="hljs-built_in">round</span>((stu[i].rank[<span class="hljs-number">3</span>] + stu[i].rank[<span class="hljs-number">1</span>] + stu[i].rank[<span class="hljs-number">2</span>]) / <span class="hljs-number">3.0</span>) + <span class="hljs-number">0.5</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (now = <span class="hljs-number">0</span>; now &lt; <span class="hljs-number">4</span>; now++)<br>    &#123; <span class="hljs-comment">//依次排序</span><br>        <span class="hljs-built_in">sort</span>(stu, stu + n, cmp);<br>        <span class="hljs-comment">//第一名先设置好</span><br>        ans[stu[<span class="hljs-number">0</span>].id][now] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (stu[j].rank[now] == stu[j - <span class="hljs-number">1</span>].rank[now])<br>            &#123;<br>                <span class="hljs-comment">//则排名一样</span><br>                ans[stu[j].id][now] = ans[stu[j - <span class="hljs-number">1</span>].id][now];<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ans[stu[j].id][now] = j + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">char</span> map[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>&#125;;<br>    <span class="hljs-keyword">int</span> query;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;query);<br>        <span class="hljs-keyword">if</span> (ans[query][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N/A\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>            &#123; <span class="hljs-comment">//选出最小的数值，若大小相同则输出优先级最高的字母</span><br>                <span class="hljs-keyword">if</span> (ans[query][j] &lt; ans[query][k])<br>                &#123;<br>                    k = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %c\n&quot;</span>, ans[query][k], map[k]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>首先不要被大量的数据吓到了，要把题目理解清除，找到排序的对应要求，拆分成多个步骤来解题循序渐进</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Summary</title>
    <link href="/thinkTimes/"/>
    <url>/thinkTimes/</url>
    
    <content type="html"><![CDATA[<p>知识分享与知识的表达其实是需要一定技术积累的，这些行为既是自我认知的提升归纳，同时也是向他人传递自己的信息，信息时代，人们的交流方式繁多，就像我一开始想要搭建博客的目的一样，与很多人一般。除此之外，我将写博客作为挖掘自身潜力的一种途径，正所谓“吾日三省吾身”，是我目前十分重视将来也会一直保持的习惯</p><h3 id="掌握高效的学习方法"><a href="#掌握高效的学习方法" class="headerlink" title="掌握高效的学习方法"></a>掌握高效的学习方法</h3><ul><li>阅读相关书籍，《Make Time》，创造自己能够掌控的所有时间</li><li>间隔复习与主动记忆</li></ul>]]></content>
    
    
    <categories>
      
      <category>思考与权衡</category>
      
    </categories>
    
    
    <tags>
      
      <tag>thoughts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>曾经使用django的建站历程</title>
    <link href="/django-dev/"/>
    <url>/django-dev/</url>
    
    <content type="html"><![CDATA[<h3 id="Django学习以及个人博客制作路程"><a href="#Django学习以及个人博客制作路程" class="headerlink" title="Django学习以及个人博客制作路程"></a>Django学习以及个人博客制作路程</h3><hr><h5 id="服务器部署步骤记录以及问题的解决"><a href="#服务器部署步骤记录以及问题的解决" class="headerlink" title="服务器部署步骤记录以及问题的解决"></a>服务器部署步骤记录以及问题的解决</h5><h6 id="修改hostname"><a href="#修改hostname" class="headerlink" title="修改hostname"></a>修改hostname</h6><ul><li><p>最好最直接不报错的办法：</p></li><li><p>在127.0.0.1 localhost 后面加上主机名称(hostname) 即可, /etc/hosts 内容修改成如下:  直接将hostname（abc）追加到后面</p></li></ul><h6 id="为了安全起见"><a href="#为了安全起见" class="headerlink" title="为了安全起见"></a>为了安全起见</h6><ul><li><p>将网站项目以及部署的文件全部保存在一个用户目录下而非root目录</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ adduser username <span class="hljs-comment">#所有命令代码开头的$只是模拟终端，可忽略</span><br></code></pre></div></td></tr></table></figure></li></ul><h6 id="正式开始项目部署"><a href="#正式开始项目部署" class="headerlink" title="正式开始项目部署"></a>正式开始项目部署</h6><ul><li><p>Python的安装，参考CSDN收藏的链接</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.5 1<br>$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2<br>//通过以上命令可以设置Python的优先级为3.6版本；在终端中输入python时会显示版本为3.6<br></code></pre></div></td></tr></table></figure><ul><li><p>上述方式在终端输入python，会默认使用你设置的版本，但是如果你想在终端输入python时显示2.7的版本，输入python3时才是你想要的版本时，需要关联一下版本。</p></li><li><p>指定python3为Python启动</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ whereis python  <br><span class="hljs-comment"># 若已经链接想要的版本就不需要往下操作了</span><br><span class="hljs-comment"># 删除软链接</span><br>$ rm /usr/bin/python<br><span class="hljs-comment">#生成制定python版本的软链接</span><br>$ ln -s /usr/bin/python3.6 /usr/bin/python<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>更新以及配置环境</p><ul><li>首要便是更新下载库： sudo apt-get update  和 apt-get upgrade</li><li>安装好需要的相关组件：Python的虚拟环境 virtualenv；git ; nginx服务器配置 ；gunicorn</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> your project address on github or gitee project-name   <span class="hljs-comment">#拉取项目 以及命名项目文件夹名称</span><br></code></pre></div></td></tr></table></figure></li><li><p>使用pip安装对应项目依赖时记住切换国内镜像源</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pip install -r requirements.txt -i http://pypi.douban.com/simple --trusted-host pypi.douban.com<br><span class="hljs-comment">#使用临时镜像源</span><br><br><span class="hljs-comment">#永久修改镜像源</span><br><span class="hljs-comment">#在指定文件中修改</span><br>mkdir -p ~/.pip<br>vim ~/.pip/pip.conf<br><span class="hljs-comment">#但这是在root目录下使用的修改，若是在某个用户目录下进行的修改，还需要修改对应目录下的.conf文件才能有效</span><br><span class="hljs-comment">#如：我的用户是yamakosu，我需要在 /home/yamakosu/.config/pip/pip.conf 文件中加入以下信息</span><br><br>[global]<br>index-url = http://pypi.douban.com/simple<br><br>[install]<br>trusted-host=pypi.douban.com<br></code></pre></div></td></tr></table></figure></li><li><p>使用pip安装所有依赖</p></li><li><p>在项目对应的虚拟环境下执行运行django项目的相关命令</p></li><li><p>在执行收集静态文件命令后 </p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cp -r ../collected_static/* static/<br><span class="hljs-comment">#将静态文件资源搬移如static中才不会报错（这是我项目的一个设计缺陷）</span><br></code></pre></div></td></tr></table></figure></li><li><p>内容尽量不要包含敏感信息，如密钥之类的</p><ul><li>需要Linux服务器的系统环境变量中设置相应的信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">SECRET_KEY = os.getenv(<span class="hljs-string">&#x27;CUBER_SECRETKEY&#x27;</span>, <span class="hljs-string">&#x27;your_secret_key&#x27;</span>)<br><span class="hljs-comment">#上面的即需要设置的环境变量,对应在环境变量文件中添加如下命令</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:path&quot;</span> <span class="hljs-comment">#此为添加路径的形式</span><br><span class="hljs-built_in">export</span> CUBER_SECRETKEY=<span class="hljs-string">&quot;%ye31rr_5r#fzhzn!_uph&amp;z7u*jd*!qyamh-3j!4lw@(^&amp;ckhr&quot;</span><br><br><span class="hljs-comment">#--------------完整流程-------------</span><br>vim /etc/profile <span class="hljs-comment">#这是设置的全局变量</span><br><span class="hljs-comment">#在文档最后，添加:</span><br><span class="hljs-built_in">export</span> env_var=<span class="hljs-string">&quot;...&quot;</span><br><span class="hljs-comment"># 保存退出后执行以下命令才会生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br><span class="hljs-comment">#可env查看设置是否成功</span><br>$ env<br><br></code></pre></div></td></tr></table></figure></li><li><p>生成依赖列表：pip install -r requirements.txt </p></li><li><p>在服务器上运行django本地测试</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">DEBUG=True <span class="hljs-comment">#测试完后部署gunicorn记得要修改为 False</span><br><br><span class="hljs-comment"># 修改settings.py中的内容,确保服务器的8000端开放</span><br>ALLOWED_HOSTS = [<span class="hljs-string">&#x27;your ip address&#x27;</span>, <span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;0.0.0.0:8000&#x27;</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>]<br><br><span class="hljs-comment">#修改完文件后保存，运行 runserver</span><br>python manage.py runserver 0.0.0.0:8000<br><br><span class="hljs-comment">#使用 公网IP:8000 地址访问项目检查是否正常运行</span><br></code></pre></div></td></tr></table></figure></li><li><p>配置nginx以及gunicorn</p></li><li><p>免费获取SSL安全证书</p><ul><li><p>设置定时任务，利用linux系统的crontab</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">查看任务： crontab -l<br>编辑任务： crontab -e<br>1.Ctrl+O  写入<br>2.出现“FIile name to Write...”，输入Enter<br>3.Ctrl+x 保存输出<br>提示“crontab:installing new crontab”表示成功<br>  <br><span class="hljs-comment">#最后下述命令使任务生效</span><br>sudo service cron restart<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>服务器上运行测试成功后要记得将settings.py的DEBUG模式修改为False,以及将ALLOW_HOST 修改</p></li><li><p>尽量提前备份数据库文件方便移植</p></li><li><p>开放端口号4497为SSH远程连接，安全性更高</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo netstat -tunlp | grep <span class="hljs-string">&quot;ssh&quot;</span> <span class="hljs-comment">#查看当前监听的端口号</span><br><br><span class="hljs-comment">#修改端口号</span><br>$ sudo vim /etc/ssh/sshd_config<br><br>Port 22<br>Port 4497<br><br>测试中涉及到端口号，对此作总结：<br>一般用到的是1~65535。<br>其中0不使用，1-1023为系统端口，也叫BSD保留端口。<br>0-1023  <span class="hljs-comment">#BSD保留端口，也叫系统端口，这些端口只有系统特许的进程才能使用；</span><br>1024-65535 <span class="hljs-comment">#为用户端口，又分为：BSD临时端口(1024-5000)和BSD服务器(非特权)端口(5001-65535)。其中：</span><br>1024-5000 <span class="hljs-comment"># BSD临时端口，一般的应用程序使用1024到4999来进行通讯；</span><br>5001-65535 <span class="hljs-comment">#BSD服务器(非特权)端口，用来给用户自定义端口。</span><br><br><span class="hljs-comment">#重启ssh服务使配置生效</span><br>$ service sshd restart<br>$ sudo netstat -tunlp | grep <span class="hljs-string">&quot;ssh&quot;</span> <span class="hljs-comment">#查看当前监听的端口号验证是否设置成功</span><br><br>最后用Xshell测试4497端口连接，成功后将22端口屏蔽保证安全<br>步骤同上，修改配置文件并重启服务<br></code></pre></div></td></tr></table></figure><ul><li><p>网站上传图片前需要修改nginx的上传文件大小上限</p></li><li><p>默认上传文件的大小是1M，可nginx的设置中修改。<br>打开nginx配置文件 nginx.conf, 路径一般是：/etc/nginx/nginx.conf。<br>在http{}段中加入 client_max_body_size 20m; 20m为允许最大上传的大小。<br>保存后重启nginx，问题解决</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ vim /etc/nginx/nginx.conf <br><br><span class="hljs-comment">#如下修改</span><br><br>http &#123;<br>        <span class="hljs-comment">##</span><br>        <span class="hljs-comment"># Basic Settings</span><br>        <span class="hljs-comment">##</span><br>        sendfile on;<br>        tcp_nopush on;<br>        tcp_nodelay on;<br>        keepalive_timeout 65;<br>        types_hash_max_size 2048;<br>        client_header_timeout 120s;<br>        client_body_timeout 120s;<br>        client_max_body_size 30m; <span class="hljs-comment">#设置最大限制30m</span><br>        client_body_buffer_size 256k;<br>        <span class="hljs-comment"># server_tokens off;</span><br>        ...<br>&#125;<br><br>$ sudo nginx -t<br>$ sudo systemctl restart nginx<br></code></pre></div></td></tr></table></figure></li><li><p>若是修改gunicorn或Django项目文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo systemctl daemon-reload<br>$ sudo systemctl restart gunicorn_tendcode <span class="hljs-comment">#只修改了django文件，只需执行该命令</span><br></code></pre></div></td></tr></table></figure></li></ul><hr><h5 id="网站的设计与改进"><a href="#网站的设计与改进" class="headerlink" title="网站的设计与改进"></a>网站的设计与改进</h5><h6 id="设计部分（目标）"><a href="#设计部分（目标）" class="headerlink" title="设计部分（目标）"></a>设计部分（目标）</h6><ul><li>文字附上删除线表示已完成</li></ul><p><del>博客的权限设置为只有我自己能写文</del></p><p><del>优化用户登录，注册，写文章页面</del> <del>为了方便审核暂时取消用户功能</del></p><p>文章列表添加标题图，<del>标题图鼠标悬浮中心放大</del>:</p><p>实现过程： 1. 添加标题图元素至数据库模型中-考虑数据大小与格式，是否需要换乘mysql作为数据库</p><p>​                    2.添加标题图，即上传图片到项目中，Pillow为插件–上传与打开图片要求如下</p><ul><li><p>核验上传文件格式是否为图片-jpg,png</p></li><li><p>上传时能够压缩图片（预先处理-压缩，大小控制）</p></li><li><p>从数据库读取图片文件时<del>自动修改图片为统一大小</del></p></li><li><p>图片不存在时是否使用默认图片作补充</p></li><li><p>图片不作为超链接Docker部署</p></li><li><p>增加时间轴页，浏览网站时间线事件</p></li><li><p>添加网站地图，便于检索</p></li><li><p><del>增加面包屑导航，更加直观的导向</del></p></li></ul><h6 id="改进部分（创新与迭代）"><a href="#改进部分（创新与迭代）" class="headerlink" title="改进部分（创新与迭代）"></a>改进部分（创新与迭代）</h6><ul><li><p>时间轴与个性化内容展示</p></li><li><p>11.4 对首页进行优化，以首页为基础进行设备兼容展示网页内容的改进，个人认为开发效率较低。</p><ol><li>个人认为是前端知识的不充足导致的，虽然有基础但实现起来较难，而且在开发代码的时候，习惯不好，用VSCODE会出现添加一段代码就实时查看一次效果的习惯，虽然这样可以时刻观察开发进度，但耗时。</li><li>还是有必要思考清除步骤，下次开发前，先对自己要实现的功能有个初步了解，同时要联系已有的代码再进行系统的更新，不然维护起来很麻烦。</li></ol><ul><li><p>目前的目标：实现一个通过在首页点击自动下滑到文章列表的主页效果。</p><p>博客样式设计更新———–</p><ul><li><p>思考如何简化代码量</p><ul><li><del>侧边回到顶部按钮统一</del></li></ul></li></ul></li></ul><ul><li>博客的数据库文件要备份–后期可以转用mysql， .db文件可以在每次项目文件全部重载时，先备份到指定文件夹下，然后再重新复制到项目文件夹里</li><li>可以考虑结合Vue设计前后端分离模式</li></ul></li></ul><h6 id="开发过程中的问题"><a href="#开发过程中的问题" class="headerlink" title="开发过程中的问题"></a>开发过程中的问题</h6><ul><li>HTML的编写不熟练</li></ul><hr><h5 id="后台设计："><a href="#后台设计：" class="headerlink" title="后台设计："></a>后台设计：</h5><ul><li><p>先了解Xadmin的使用与项目的结合</p></li><li><p>后台的板块设计，功能设计</p><ul><li><p>自定义界面</p><ul><li><p>后台管理登录</p></li><li><p>后台首页：</p><p>1.侧边栏按钮（网站各主要信息板块）</p><p>2.进入首页自动生成统计图表</p><ul><li>访问量</li><li>点赞数</li><li>解析IP地址-用户分布图</li><li>调用Echarts插件来制图</li></ul></li></ul></li></ul></li><li><p>各模块的优化设计</p><ul><li>文章 Article Post<ul><li>title</li><li>body</li><li>create_time</li><li>update_time</li><li>字数统计（可以后期添加，当做python学习的另一种方式）</li><li>文章的转载许可与开源性</li></ul></li><li>用户版块（暂且不使用）</li><li>评论模块（与用户版块结合才行）</li><li>一些小功能的设计（以后再说）<ul><li>在线功能，网站作为一个接口</li><li>自制导航页<ul><li>节省访问流量（背景不同高清图，用一种CSS设计的图片就行了）</li><li>百度搜索引擎接口</li><li>一些常用网址链接展示</li></ul></li></ul></li></ul></li></ul><h3 id="开启新的旅程！"><a href="#开启新的旅程！" class="headerlink" title="开启新的旅程！"></a>开启新的旅程！</h3><h4 id="HEXO-博客的安装，分本地和服务器部署"><a href="#HEXO-博客的安装，分本地和服务器部署" class="headerlink" title="HEXO 博客的安装，分本地和服务器部署"></a>HEXO 博客的安装，分本地和服务器部署</h4><ul><li><p>使用hexo主题快速搭建博客</p></li><li><p><a href="mailto:&#x6e;&#x70;&#109;&#64;&#x37;&#x2e;&#x31;&#52;&#x2e;&#x30;">&#x6e;&#x70;&#109;&#64;&#x37;&#x2e;&#x31;&#52;&#x2e;&#x30;</a></p></li><li><p>服务器安装npm</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo npm install -g n<br>sudo n stable<br>PATH=<span class="hljs-variable">$PATH</span><br><br>//修改指定端口连接服务器并发布<br>deploy:<br>- <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;git&#x27;</span><br>  repo:<br>     site: ssh://username@ip:port/path/blog.git,master<br>- <span class="hljs-built_in">type</span>: baidu_url_submitter <br><br><br><span class="hljs-comment">#查看远程连接端口</span><br>netstat -tunlp | grep ssh<br><span class="hljs-comment">#修改ssh服务配置</span><br>vim /etc/ssh/sshd_config<br><br><span class="hljs-comment">#重启ssh服务使配置生效</span><br>service ssh restart<br><br></code></pre></div></td></tr></table></figure><h4 id="HEXO博客的自定义设计"><a href="#HEXO博客的自定义设计" class="headerlink" title="HEXO博客的自定义设计"></a>HEXO博客的自定义设计</h4><ul><li>如何修改主题样式</li><li>修改footer样式，别搞这么多东西</li></ul><h4 id="进阶功能"><a href="#进阶功能" class="headerlink" title="进阶功能"></a>进阶功能</h4><ul><li>Picx图床（免费，GitHub作为仓库，网络上是公开的）<ul><li>暂时使用七牛云</li></ul></li><li>资源压缩</li><li>网站地图（百度搜索，谷歌搜索），知识共享</li><li>能否使用echarts工具做一些有趣的工具</li><li>为网站添加一些在线工具（由于可以直接创建一个新页面在菜单栏并跳转，且新页面的文本可用html语句编写，就可以用于开发新页面）</li></ul><hr><h5 id="总结与反思"><a href="#总结与反思" class="headerlink" title="总结与反思"></a>总结与反思</h5>]]></content>
    
    
    <categories>
      
      <category>技术拓展</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web-Dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
